# 1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é make_coffee(name, sugar, milk), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç, —á—Ç–æ –∑–∞ –∫–æ—Ñ–µ –±—É–¥–µ—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω. –ü—Ä–∏—á–µ–º —Å–∞—Ö–∞—Ä –∏ –º–æ–ª–æ–∫–æ –º–æ–∂–Ω–æ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å.
# –ü—Ä–∏–º–µ—Ä:

# make_coffee("Latte") ‚ûù Latte with 1 sugar and no milk
# make_coffee("Espresso", 0, True) ‚ûù Espresso with 0 sugar and with milk

# def make_coffee(name, sugar=0, milk=False):
#     print("Order üîî:")

#     if (milk == True):
#         print(f"User ordered ‚òï {name} with {sugar} tsp of sugar and milk")
#     else:
#         print(f"User ordered ‚òï {name} with {sugar} tsp of sugar and no milk")


# make_coffee("Latte", sugar=2, milk=True)
# make_coffee("Espresso")


# def make_coffee(name, sugar=0, milk=False):
#     print("Order üîî:")
#     isMilkOrdered = 'and no milk'

#     if (milk == True):
#         isMilkOrdered = "and with milk"

#     print(f"User ordered ‚òï {name} with {sugar} tsp of sugar {isMilkOrdered}")


# make_coffee("Latte", sugar=2, milk=True)
# print()
# make_coffee("Espresso")


# 2. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é longest_word(*words), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ.
# –ü—Ä–∏–º–µ—Ä:

# longest_word("apple", "banana", "strawberry") ‚ûù "strawberry"


# def longest_word(*args):
#     theLongestWord = args[0]
#     index = 1

#     while (index < len(args)):

#         if (len(args[index]) > len(theLongestWord)):
#             theLongestWord = args[index]

#         index += 1

#     return theLongestWord

# def longest_word(*args):
#     theLongestWord = args[0]
#     for element in args:
#         if (len(element) > len(theLongestWord)):
#             theLongestWord = element

#     return theLongestWord


# names = ["Ali", "Farhad", "Esmiralda", "Samir"]
# result = longest_word(*names)
# print(result)


# 3.  –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_password(length, include_special), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤. include_special - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ï—Å–ª–∏ include_special=True, –¥–æ–±–∞–≤—å—Ç–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª–∏ random –∏ string.

# import random
# import string


# def generatePassword(length, include_special=False):
#     charactersPool = string.ascii_letters

#     if include_special == True:
#         charactersPool += string.punctuation

#     passwordList = random.choices(charactersPool, k=length)
#     password = ''.join(passwordList)
#     print(password)


# generatePassword(18, True)

# 4. –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–ª–æ–≥–∞
# –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–ø—Ä–ª–∞—Ç—ã.
# –§—É–Ω–∫—Ü–∏—è calculate_salary(base, bonus) –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é apply_tax(salary) ‚Äî –æ–Ω–∞ —É–º–µ–Ω—å—à–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–∞ 14% –Ω–∞–ª–æ–≥–∞. –í–µ—Ä–Ω–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–∞ –∏ –±–æ–Ω—É—Å–∞. –¢–∞–∫–∂–µ –¥–ª—è —Ñ-—Ü–∏–∏ calculate_salary —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.

# def calculate_salary(base: float, bonus: float) -> float:
#     print("Your GROS salary:", base)

#     def apply_tax(salary: float) -> float:
#         return salary * 0.86
#     base = apply_tax(base)
#     total = base + bonus
#     print("Your NET salary: ", base)
#     print("Your salary with bonus", total )
#     return total

# result = calculate_salary(1000,200)
# print(result)

# 5. –†–∞—Å—à–∏—Ä—è–µ–º–æ–µ –º–µ–Ω—é
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é menu(title, options) ‚Äî –ø–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é, –≥–¥–µ options - –ø–∞—Ä–∞¬≠–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ-—Ü–∏—é.
# –ü—Ä–∏–º–µ—Ä:
# –∞) menu("Main Menu", "Start", "Settings", "Exit")

# Main Menu:
# 1. Start
# 2. Settings
# 3. Exit

# b) menu("Step It Catering", "Book a place", "Reservations", "Food of the day", "Price list", "Exit")
# Step It Catering
# 1. Book a place
# 2. Reservations
# 3. Food of the day
# 4. Price list
# 5. Exit

# def menu(title, *args):
#     print(title)
#     order = 1
#     for option in args:
#         print(f"{order}. {option}")
#         order += 1


# options = ["Book a place", "Reservations",
#     "Food of the day", "Price list", "Exit"]

# title = "Step it food"
# menu(title, *options)

# 6. –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é validate_and_square(n):

# –í–Ω—É—Ç—Ä–∏ –Ω–µ—ë —Ñ—É–Ω–∫—Ü–∏—è is_number(n), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ n ‚Äî —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.

# –ï—Å–ª–∏ —á–∏—Å–ª–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å n**2, –∏–Ω–∞—á–µ ‚Äî None.

# def is_number(userInput: str) -> bool:
#     return str.isdigit(userInput)


# def validate_and_square(userInput: str) -> float:
#     if (is_number(userInput)):
#         return float(userInput) ** 2
#     return None


# print(validate_and_square("hello"))

# 7. –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Ñ—É–Ω–∫—Ü–∏–π (add, sub, mul). –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é apply_all(funcs, a, b) ‚Äî –æ–Ω–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ a –∏ b –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

# def add(a, b):
#     return a + b


# def sub(a, b):
#     return a - b


# def mul(a, b):
#     return a * b


# def apply_all(*args, a, b):
#     results = []
#     for action in functions:
#         results.append(action(a, b))
#     return results


# functions = [add, sub, mul]
# result = apply_all(*functions, 10, 5)
# print(result)


# 8. –í—ã–∑–æ–≤ —Ñ-—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ-—Ü–∏–∏ (–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ üòÑ)
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(s: str) -> bool. –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é check_all(*words) ‚Äî –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç is_palindrome() –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –∏–∑ –≤—Å–µ—Ö —Å–ª–æ–≤.

# def is_palindrome(s: str) -> bool:
#     reversedWord = s[::-1]
#     if (s == reversedWord):
#         return True
#     else:
#         return False


# def check_all(*args):
#     only_palindromes = []
#     for word in args:
#         if (is_palindrome(word) == True):
#             only_palindromes.append(word)

#     return only_palindromes


# words = ["alla", "–∏—Å–∫–∞—Ç—å—Ç–∞–∫—Å–∏", "kamran", "bob", "123321", "hello"]
# result = check_all(*words)
# print(result)

# 9. –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã + —Ç–∏–ø–∏–∑–∞—Ü–∏—è
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é def circleArea, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ hinting (–ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)

# def areaCircle(radius: float) -> float:
#     pi = 3.14
#     return pi * (radius ** 2)


# print(areaCircle(radius=1))

# 10. –£–≥–ª—É–±–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å args –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
# –û–ø–∏—Å–∞–Ω–∏–µ:
# –§—É–Ω–∫—Ü–∏—è unique_sorted_numbers(*args) –¥–æ–ª–∂–Ω–∞:

# def unique_sorted_numbers(*args):
#     uniqueNumbers = set(args)
#     uniqueEvenNumbers = []
#     for number in uniqueNumbers:
#         if (number % 2 == 0):
#             uniqueEvenNumbers.append(number)
#     print(uniqueEvenNumbers)


# unique_sorted_numbers(1, 1, 3, 4, 5, 62, 4, 5, 1)

# üëâ –ü—Ä–∏–Ω—è—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª;

# üëâ –£–¥–∞–ª–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã;

# üëâ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ—á—ë—Ç–Ω—ã–µ;

# üëâ –í–µ—Ä–Ω—É—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª.

# 11.
# –û–ø–∏—Å–∞–Ω–∏–µ:

# –§—É–Ω–∫—Ü–∏—è build_route(start, *points, end = "Home")

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:

# (–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ-—Ü–∏–∏ –ø–æ–Ω—è—Ç—å –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –∏–∑ –Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∫–∞–∫–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω—ã –∏ —Ç.–ø.)
# –¢–∞–∫ –µ—Å–ª–∏ —è —Ö–æ—á—É –≤—ã–π—Ç–∏ –∏–∑ –ë–∞–∫—É –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π, —Ç–æ:
# Route: Baku ‚Üí Ganja ‚Üí Sheki ‚Üí Home

def build_route(*points, start, end="Home"):
    print(start, end=" ‚Üí ")
    for point in points:
        print(point, end=' ‚Üí ')
    print(end)


points = ["Sheki", "Ganja", "Lenkaran", "Astara", "Lerik"]
build_route("Sheki", "Ganja", start="Baku", end="Baku")


# 12 –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ 2—á–Ω–æ–µ

# def decimal_to_binary(n):
#     if n == 0:
#         return "0"

#     bits = []
#     while n > 0:
#         bits.append(str(n % 2))  # Add remainder as string
#         n = n // 2

#     bits.reverse()  # Reverse the list to get correct order
#     return ''.join(bits)
