Перед тем как приступить к коду, затронем понятие конвенций.

Конвенция - это правило написания и оформления кода. Данные правила есть и в естественных языках,  например на английком I всегда пишется с заглавной буквы, перед что всегда ставится запятая и т.д.

📃 В python документ, регламентирующий как нжно оформлять и писать код называется Pep8 (Python Enhancement Proposal).

Вот некоторые выдержки из этого документа:

1. Для ограниченя областей используются отступы.
2. Длина одной строки кода не должна превышать 79 символов.
3. Функции должны быть отделены от других строк 2 пустыми строками.
4. Комментарии также должны быть отделены 2мя пробелами.

🔮 Для автоматического форматирования кода будем использовать расширение autopep8. 
Теперь нужно это расширение включить. Для этого переходим в Settings (Ctrl + ,) и в поиске вводим Format on save. Нужно поставить check на первый option. Теперь данное расширение при каждом сохранении будет форматировать код согласно регламенту Pep8.

🗽 В предыдущем модуле рассматривались примеры, в которых инструкции выпол­нялись последовательно, однако иногда требуется пропустить некоторые инструкции или выбрать, какая инструкция будет выполнена. В программировании для предоставления вариативности использования и многофункциональности применяются условные конструкции, конструкции для обработки исключений и циклы.

🌿 Операторы ветвлений (или условные инструкции) позволяют строить простые конструкции, перенаправляющие выполнение программы, подобно любой регистрационной странице. Например выполнение программы пойдет по иному пути, если Вы решитесь зарегаться под уже сущесвующим логином.

Что нужно для построения такой программы.

1. Нужен оператор ветвления (if)
2. Указать условие
3. Указать набор инструкций, которые должны произойти при этом условии.

Куда пойдет алгоритм зависит от ложности или истинности того или иного условия. Результатом проверки условий является пара True/False. Мы с ними сталкиваемся повсеместно

❄ Например, когда ваш друг позвал вас на прогулку и сказал, что на улице хорошая погода, может произойти две ситуации:

1. вы посмотрите на улицу, убедитесь, что погода хорошая (т.е. утверждение друга истинно), и вы пойдете на прогулку; 

2. вы посмотрите на улицу, увидите, что погода плохая (т.е. утверждение друга ложно), и вы останетесь дома.

Конечно, в реальности мы можем сомневаться, однако в программировании оценка выражений всегда сводится к одному из этих двух вариантов. Нет никаких наверное, может быть, не знаю и т.п. Для представления истинности и ложности используются ключевые слова True и False соответственно.

🚫🔵Результатом каких операций может быть True/False. Очевидно, что любое сравнение результируется или истинной или ложью. 

Пример сравнения роста.

Кто выше A или B    - неправильный вопрос
A выше чем  B       - правильный вопрос

👩‍🔬 Python поддерживает следующие операции сравнения:

==          Равно
!=          Не равно
>           Больше
<           Меньше
>=          Больше или равно
<=          Меньше или равно


# print("1 == 1:", 1 == 1)  # 1 == 1: True
# print("1 == 2:", 1 == 2)  # 1 == 2: False


# print("1 != 1:", 1 != 1)  # 1 != 1: False
# print("1 != 2:", 1 != 2)  # 1 != 2: True


# print("1 > 10:", 1 > 10)  # 1 > 10: False
# print("10 > 1:", 10 > 1)  # 10 > 1: True
# print("1 > 1:", 1 > 1)  # 1 > 1: False


# print("2 < 1:", 2 < 1)  # 2 < 1: False
# print("1 < 2:", 1 < 2)  # 1 < 2: True
# print("1 < 1:", 1 < 1)  # 1 < 1: False


# print("1 >= 1:", 1 >= 1)  # 1 >= 1: True
# print("1 >= 2:", 1 >= 2)  # 1 >= 2: False
# print("2 >= 1:", 2 >= 1)  # 2 >= 1: True


# print("1 <= 1:", 1 <= 1)  # 1 <= 1: True
# print("1 <= 2:", 1 <= 2)  # 1 <= 2: True
# print("2 <= 1:", 2 <= 1)  # 2 <= 1: False

🙆‍♂️В python есть возможность привести желаемый тип в булевый. 

Из очевидных:
bool(1) - True
bool(0) - False

Из не очевидных
Строка без символов - False
Строка с символами - True
bool("") - False
bool("Hi") - True

🚧 В жизни могут возникать сиуиации, когда на принятие решения влияют сразу несколько факторов. 
Например:
Я могу водить машину если мне больше 18 И если у меня есть права.
Программа установится, если достаточно памяти И если версия операционной системы подходит.

Я заменю телефон, если он перестанет работать ИЛИ если появится интересная новая модель.
Я выброшу мусор, если он будет полон ИЛИ если начнёт пахнуть.

💫 Для составления таких сложных условий в программировании используются 2 логических оператора
and | or.

And возвращает True, если оба выражения равны True.

olderThan18 = False
hasDriverLicense = True

canDrive = olderThan18 and hasDriverLicense
print(canDrive)

Or возвращает True, если хотя бы 1 из выражений равно True.

doesStink = False
isFull = True

shouldThrow = doesStink or isFull

print(shouldThrow)

Также существует еще 1 логический оператор not, который просто из False делает True и наоборот.
Например нужно брать зонт, если на улеце дождь, а если дождя нет - то не надо.

isRaining = True
takeAnUmbrella = not isRaining
print(takeAnUmbrella)


Рассмотрим такой сложный пример. Вы хотите доехать в город А на поезде. Чтобы поехать на нем нужно выполнить несколько условий. 

1. Вы должны или оплатить поездку на месте или прелъявить заранее купленный билет
2. Не нести с собой большой багаж.
3. Успеть на поезд. Они едут  6ти утра до 12ти дня.

Тогда условие мы напишем в таком виде:

money = True
ticket = False
isLuggageBig = False
time = 10

print(money or ticket and not isLuggageBig and time > 6 and time < 12)

И запустив код с такими условиями мы получим True. Однако программа работает не корректно. Если придет пассажир с большим багажем, система его пропустит выдав True. Дело в том, что на эти логические операции также действует логика приоритеов как в арифметических операциях. 

Сначала выполняется not потом and и наконец or

Как исправить эту проблему. Во первых стараться не писать такие большие условия в строку, вместо этого разделять их:

money = False
ticket = True
isLuggageBig = False
time = 15

hasAccess = money or ticket
madeOnTime = time > 6 and time < 12
luggageFits = not isLuggageBig

print(hasAccess and madeOnTime and luggageFits)


Или как и с математическими операциями, для переопределения порядка выполнения можно использовать скобки:
print((money or ticket) and not isLuggageBig and (time > 6 and time < 12))


ЗАДАНИЕ 1: Парк аттракционов
Ситуация:
В парк допускаются люди:

Старше 12 лет или в сопровождении взрослого.

Без температуры (меньше 37.5).

Не имеющие аллергии на пыльцу (сейчас сезон пыльцы).


ЗАДАНИЕ 2: Въезд в другую страну
Ситуация:
Для пересечения границы нужны:

Виза или гражданство страны.

Действующий паспорт.

Отсутствие запрета на въезд.
