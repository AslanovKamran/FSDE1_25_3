üìö –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: –°–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫

–ë–ª–∏–∂–∞–π—à–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π –º—ã —Å –í–∞–º–∏ –±—É–¥–µ–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å —Ç–∞–∫—É—é —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Ç–µ–º—É –∫–∞–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∫–∞—Å–∞–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ —è–∑—ã–∫–∞ –°++, –Ω–æ –∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ - —ç—Ç–æ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –î–∞–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ 2 –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:
–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ

1Ô∏è‚É£ –ö –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–≥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ–¥–Ω–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
–ü—Ä–∏–º–µ—Ä—ã: int, float, bool, char –∏ —Ç.–ø.


2Ô∏è‚É£ –ö –Ω–µ–ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –≤—Å—è—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö. –ò–∑ –≤—Å–µ—Ö —Ç–∞–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –º—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ - —Å–∞–º—ã–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

üí° –ú–∞—Å—Å–∏–≤ - –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ.

–ü–æ–º–∏–º–æ –º–∞—Å—Å–∏–≤–æ–≤ –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π, –≥–¥–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–µ–º–Ω–æ–≥–æ –ø–æ –¥—Ä—É–≥–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É –∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–ª–µ–≥–∫–∞ –∏–Ω–∞—á–µ. –°—Ä–µ–¥–∏ –Ω–∏—Ö:

    Linked List
    Stack
    Queue
    Tree,
    Hash table

–ò –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∏–Ω–æ–≥–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –Ω–µ–∂–µ–ª–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏. –ù–∏ –æ–¥–∏–Ω –≤–∏–¥ –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –ª–∏—à–µ–Ω —Å–≤–æ–∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤. –ö–∞–∫–∏–µ-—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–µ–µ –¥–ª—è —á—Ç–µ–Ω–∏—è, –Ω–æ –±—ã—Å—Ç—Ä–æ –¥–ª—è –∑–∞–ø–∏—Å–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–æ–±–æ—Ä–æ—Ç –∏ –¥.—Ä.

üë®‚Äçüè´ –¢–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –ø–ª—é—Å–æ–º –º–∞—Å—Å–∏–≤–∞ —è–≤–ª—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ–µ —á—Ç–µ–Ω–∏–µ: –Ω–µ –≤–∞–∂–Ω–æ –ø–æ –∫–∞–∫–æ–º—É –∏–Ω–¥–µ–∫—Å—É –º—ã –ø—Ä–æ—á–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ 1–º—É –∏–ª–∏ –ø–æ 1001–º—É, –∞ –≤–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å—Ç–∞–≤–∫–∏ –æ—á–µ–Ω—å –∑–∞—Ç—Ä–∞—Ç–Ω—ã. –ò –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–∞–º –∑–∞ —Ä–∞–∑ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç–µ–Ω –∑–∞–ø–∏—Å–µ–π –≤ –Ω–∞—à –º–∞—Å—Å–∏–≤, —Ç–æ –º—ã –ø—Ä–æ—Å—è–¥–µ–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –ø–æ–¥–æ–π–¥—É—Ç –¥—Ä—É–≥–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∞ –∏–º–µ–Ω–Ω–æ List.

–ò–ª–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –∂–µ —á–∞—Å—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ç–∏–ø–∞ Tree. 

üß© –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏–æ—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –∑–Ω–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –∏—Ö —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ò—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —è–∑—ã–∫–∞ C++, –∞ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º (–∏ –≤ C# —Ç–æ–∂–µ) –º—ã —É–∂–µ –±—É–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏–∑ –∫–æ—Ä–æ–±–∫–∏.

üë®‚Äçüè´ –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤—ã–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö –≤—Å–ø–æ–º–Ω–∏–º —Ç–æ, –∫–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º. 

–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ —É –Ω–∞—Å –µ—Å—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ –≤ heap. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–∞–º—è—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –∫–∞–∫ —Å–æ—Å—Ç–∞–≤ –ø–æ–µ–∑–¥–∞. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª-–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π. –≠—Ç–æ –æ—á–µ–Ω—å —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–Ω–æ: –∏ —á–µ–º –±–æ–ª—å—à–µ –Ω–∞—à –º–∞—Å—Å–∏–≤ —Ç–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å—Ç–∞–≤–∫–∞. –°—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–µ–º—ã –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Å—Ç–∞–≤–∫–∏ - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è capacity. –° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—ã–¥–µ–ª—è—Ç—Å—è –≤ 1,5—Ö —Ä–∞–∑ –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏, —á–µ–º –Ω—É–∂–Ω–æ, –∑–∞ —Å—á–µ—Ç —ç—Ç–æ–≥–æ –¥–æ –∫–∞–∫–æ–≥–æ-—Ç–æ –º–æ–º–µ–Ω—Ç–∞ –º–æ–∂–Ω–æ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –≤—Å—Ç–∞–≤–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –¢–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–ª–∞—Å—Å—ã string & vector. –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–≤—ã–¥–µ–ª–∏—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ capacity –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –ø—Ä–µ–¥–µ–ª–∞.

‚ö° –û–¥–Ω–∞–∫–æ –∏ —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –æ–¥–∏–Ω –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –ø–ª—é—Å - —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É. –¢–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å —ç—Ç–æ –Ω–∏—á—Ç–æ –∏–Ω–æ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ —á–∏—Å–ª–æ (–∞ —á–∏—Å–ª–∞–º–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –±—ã—Å—Ç—Ä–æ), —Ç–æ –Ω–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –æ–±—Ä–∞—â–∞–µ–º—Å—è –º—ã –∫ 5–º—É –∏–ª–∏ 1005–º—É —ç–ª–µ–º–µ–Ω—Ç—É. –î–æ–π—Ç–∏ —Å –Ω—É–ª–µ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–æ –Ω–∏—Ö –æ–±–æ–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –º–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∏ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π. –ö –Ω–∞—á–∞–ª—å–Ω–æ–º—É (–Ω—É–ª–µ–≤–æ–º—É) –∞–¥—Ä–µ—Å—É —è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–±–∞–≤–ª—é 5, –∞ –ø–æ—Ç–æ–º 10005, —á—Ç–æ –∑–∞–π–º–µ—Ç –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ –≤—Ä–µ–º—è.

–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π –µ–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å—é - —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –±—ã—Å—Ç—Ä–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ - Linked List. 

üëâ –ï—Å–ª–∏ —è —Ö—Ä–∞–Ω—é —á–∏—Å–ª–∞ 11, 22, 33 –≤ –º–∞—Å—Å–∏–≤–µ —Ç–æ –≤ –ø–∞–º—è—Ç–∏ –æ–Ω–∏ —É –º–µ–Ω—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ

    *myArray -> 11 | 22 | 33

üß† –í —á–µ–º —Å–º—ã—Å–ª —Å–ø–∏—Å–∫–∞. –í–æ –ø–µ—Ä–≤—ã—Ö –≤–º–µ—Å—Ç–æ "–≥–æ–ª—ã—Ö" —á–∏—Å–µ–ª —è —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—é —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–µ —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–∂–µ –Ω–∞–∑—ã–≤–∞—é—Ç node. –ö–∞–∂–¥—ã–π node –≤ —Å–µ–±–µ —Ö—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ value –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π node. –ê –∏–º—è —Å–ø–∏—Å–∫–∞ —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ 1—ã–π node. –ò –≤ —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Å–µ —ç—Ç–∏ nodes —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—É—Å–∫–∞—Ö –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–∞—Å—Å–∏–≤–∞, —è–≤–ª—è—é—â–µ–π—Å—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö.

    myList -> [11,pointer] -> [22, pointer] -> [33, nullptr]

üéØ –í —á–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏? –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞ –≤ –ª—é–±—É—é –ø–æ–∑–∏—Ü–∏—é –º–Ω–µ –Ω—É–∂–Ω–æ –ª–∏—à—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å. –¢–æ –∂–µ —Å–∞–º–æ–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

üòê –í —á–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏? –ó–¥–µ—Å—å —É–∂–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ. –ü–æ—ç—Ç–æ–º—É, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ 51–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —è –ø–æ –ª—é–±–æ–º—É –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–≤—ã–µ 50, –ø–µ—Ä–µ–º–µ—â–∞—è—Å—å –æ—Ç —É–∑–ª–∞ –∫ —É–∑–ª—É. –ï—â–µ –æ–¥–Ω–∏–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ —É–∑–ª–∞. –ì–æ–ª–æ–µ —á–∏—Å–ª–æ –≤–µ—Å–∏–ª–æ 4 –±–∞–π—Ç–∞, —Ç–æ–≥–¥–∞ –∫–∞–∫ —É–∑–µ–ª –≤–µ—Å–∏—Ç 4 + 8, –≥–¥–µ –≤ 8 —ç—Ç–æ —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞—Ç–µ–ª—è (–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π = 4). –û–¥–Ω–∞–∫–æ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ —ç—Ç–æ –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ —á–µ–º –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –Ω–æ–≤—ã–π.

–ü–µ—Ä–µ–π–¥–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –¥–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ö–∞–∫ —É–∂–µ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ –≤–º–µ—Å—Ç–æ –≥–æ–ª—ã—Ö —á–∏—Å–µ–ª –Ω–∞–º –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∞ –∏–º–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç. –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–æ–≤–µ–º Node

    class Node
    {
        int data;
        Node* next;
    };

–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å, —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ 2 –ø–æ–ª—è: –∑–Ω–∞—á–µ–Ω–∏–µ - —Ç.–µ. —Å–∞–º–æ —á–∏—Å–ª–æ, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ —É–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∂–µ —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –∂–µ –ø–æ–ª—è. 

üß† –¢—É—Ç –º–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–∏–∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º —è –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–∂—É. –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤  –¥—Ä—É–≥–æ–º –∫–ª–∞—Å—Å–µ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º MyList, –≤ —Å–æ—Å—Ç–∞–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–π–¥–µ—Ç –º–æ–π Node. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –º—ã –º–æ–∂–µ–º –∑–∞–º–µ–Ω—Ç—å –∫–ª–∞—Å—Å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ç–∞–∫ –∫–∞–∫ Node –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ù–∏–∫–∞–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –æ–±—ä–µ–∫—Ç–µ Node –Ω–µ –±—É–¥–µ—Ç.

    struct Node
    {
        int data;
        Node* next;
    };

–ü–µ—Ä–µ–π–¥–µ–º —Ç–µ–ø–µ—Ä—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–∞–º–æ–≥–æ –∫–ª–∞—Å—Å–∞ MyList. –ö–∞–∫ –∏ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Å–∞–º list –±—É–¥–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ù–∞–∑–æ–≤–µ–º –µ–≥–æ head.  –¢–∞–∫–∂–µ –±—É–¥–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–æ–ª–µ —Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
–í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –ø—Ä–æ–ø–∏—à–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π

    class MyList
    {
        private:
            
            Node* head = nullptr;
            int size = 0;

        public:

            void pushBack(int data);
            void insert(int data, int position);
            void remove(int position);
            int getAt(int position);
    };
    


üîç –ù–∞—á–Ω–µ–º –≤ –º–µ—Ç–æ–¥–∞ pushBack. –ü—Ä–∏—á–µ–º –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è –∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
–ï—Å–ª–∏ —É –Ω–∞—Å –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞, —Ç–æ head —É–∫–∞–∑—ã–≤–∞–µ—Ç –≤–Ω–∏–∫—É–¥–∞ - nullptr. –ß—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:

    –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø–∞–º—è—Ç–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å head-a –Ω–∞ –Ω–µ–≥–æ.
    –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞–Ω–Ω–æ–º—É head-—É –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ data
    –≤ –ø–æ–ª–µ next –∑–∞–ø–∏—Å–∞—Ç—å nullptr (–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–∂–µ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º)


    void pushBack(int data) 
    {
        
        if (head == nullptr)
        {
            Node* newNode = new Node();
            newNode->data= data;
            newNode->next = nullptr;
           
            //–∏–ª–∏
            //(*newNode).data = data;
            //(*newNode).next = nullptr;
           
            head = newNode;
        }
        else
        {
            //
        }
        size++;
    }


üìç –ß—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –≤ —Å–ø–∏—Å–∫–µ —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–º –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π.
–ö–∞–∫–∏–µ —à–∞–≥–∏ –Ω—É–∂–Ω–æ –ø—Ä—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ. 

–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–ø–∏ - —ç—Ç–æ —Ç–æ—Ç —É–∑–µ–ª —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –ø–æ–ª–µ next —Ö—Ä–∞–Ω–∏—Ç—Å—è nullptr.
–ü–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ Node –∏ –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–¥ –Ω–µ–µ –ø–∞–º—è—Ç—å –≤ –û–°. 
–î–∞–ª–µ–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–π —É–∑–µ–ª –¥–∞–Ω–Ω—ã–º–∏ 
–í —É–∫–∞–∑–∞—Ç–µ–ª—å next –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–∑–ª–∞ –∑–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ

–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ –æ—á–µ–Ω—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–∞–Ω–Ω—ã–π –Ω–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥.

    else
    {
        Node* current = head;
        while(current-> next != nullptr)
        {
            current = current->next;
        }
        
        Node* newNode = new Node();
        newNode->data = data;
        newNode->next = nullptr;
        
        current->next = newNode;
    }

–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º print(). –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –º–∞—Å—Å–∏–≤, —Ç–æ –Ω–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.

    void print()
    {
        Node* current = head;
        while (current != nullptr)
        {
            cout << current->data << " ";
            current = current->next;
        }
    }


üß© –ò —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ main-e.

    MyList list;

    list.pushBack(11);
    list.pushBack(21);
    list.pushBack(31);
    list.pushBack(41);

    list.print();


‚ùå –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º –∑–¥–µ—Å—å. –° –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º—ã —Ç—Ä–∞—Ç–∏–º –≤—Å–µ –±–æ–ª—å—à–µ –∏ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–∞—Å—Å–∏–≤–∞ –º—ã —ç–∫–æ–Ω–æ–º–∏–º –ø–∞–º—è—Ç—å - –¥–∞. –ù–∞–º –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–µ—Ä–∂–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏ 2 –º–∞—Å—Å–∏–≤–∞ —Ä–∞–∑–º–µ—Ä–∞–º–∏ N –∏ N + 1. –û–¥–Ω–∞–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–ø–µ—Ä—å –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.

–î–ª—è –±–æ–ª–µ–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫—Ä–æ–º–µ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞—á–∞–ª–æ - –Ω–∞ –≥–æ–ª–æ–≤—É –ª–∏—Å—Ç–∞ - —Ç–∞–∫–∂–µ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –Ω–∞ –∫–æ–Ω–µ—Ü - –Ω–∞ —Ö–≤–æ—Å—Ç –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–ª–∞—Å—Å MyList –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∏ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:

    class myList
    {
    private:
        Node* head = nullptr;
        Node* tail = nullptr;
        int size = 0;
    };

üëå –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª–µ–µ –Ω–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –≤—Å–µ–º N-1 —ç–ª–µ–º–µ–Ω—Ç–∞–º, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞.
–ò–∑–º–µ–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ else –±–ª–æ–∫, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞. –ó–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –æ–¥–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞: –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ç–æ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –∏ –µ–≥–æ –≥–æ–ª–æ–≤–æ–π –∏ —Ö–≤–æ—Å—Ç–æ–º.


    void pushBack(int data) 
    {
        
        if (head == nullptr)
        {
            Node* newNode = new Node();
            
            newNode->data= data;
            newNode->next = nullptr;           
            
            head = newNode;
            tail = newNode; // –ò –≥–æ–ª–æ–≤–∞ –∏ —Ö–≤–æ—Å—Ç —É–∫–∞–∑—ã–≤–∞—é—Ç –≤ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —É–∑–µ–ª
        }
        
        else
        {
            Node* newNode = new Node();
            
            newNode->data = data;
            newNode->next = nullptr;

            tail->next = newNode; // Link new node at the end
            tail = newNode;       // Update tail to new node
        }
        
        size++;
    }

–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –º—ã –≤ pushBack –≤ –±–ª–æ–∫–µ else –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É. –ù–∞—à tail –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∫–æ–Ω–µ—Ü –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞. –î–ª—è —ç—Ç–æ–≥–æ —è —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π node. –í –µ–≥–æ –ø–æ–ª–µ data –∑–∞–ø–∏—Å—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ, –∞ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞—é –∫–∞–∫ nullptr, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–ø–∏. –î–∞–ª–µ–µ, —Ç–µ–ø–µ—Ä—å —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à —Ö–≤–æ—Å—Ç —Å–µ–π—á–∞—Å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º —è –¥–æ–ª–∂–µ–Ω –≤ –µ–≥–æ next –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ —Å—Ç–∞—Ä–æ–≥–æ tail –Ω–∞ –Ω–æ–≤—ã–π —É–∑–µ–ª.

‚ö° –ò —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü –∏ –≤ –Ω–∞—á–∞–ª–æ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –µ—Å—Ç—å 2 —É–∫–∞–∑–∞—Ç–µ–ª—è.


–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤ —Ä–∞–∑—ã. –ú–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ—á–∫–∏ –≤ if else –±–ª–æ–∫–∞—Ö –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è. –ò—Ö –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –Ω–∞—Ä—É–∂—É.


    void pushBack(int data) 
    {
        Node* newNode = new Node();
            
        newNode->data= data;
        newNode->next = nullptr;     
        
        if (head == nullptr)
        {
            head = tail =  newNode;
        }
        
        else
        {
            tail->next = newNode; 
            tail = newNode;       
        }
        
        size++;
    }


üß© –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é - –º–µ—Ç–æ–¥ insert. –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: 
    
    –∑–Ω–∞—á–µ–Ω–∏–µ - data
    –ø–æ–∑–∏—Ü–∏—é  - position

–†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥. –í–æ –ø–µ—Ä–≤—ã—Ö –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º, –≥–¥–µ –ø—Ä–∏ –µ–≥–æ –ù–ï–ø–µ—Ä–µ–¥–∞—á–µ —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞. –ò —Ç—É—Ç –≤—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ: –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ —É–∫–∞–∑–∞—Ç–µ–ª–∏ head —É–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ. –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –≤—Å—Ç–∞–≤–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π. –¢–æ–≥–¥–∞ –∏ tail –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ.


    void insert(int data, int position = 0)
    {
        if (position < 0 || position >= size) 
        {
            cout << "Invalid position!\n";
            return;
        }

        Node* newNode = new Node; 

        // Case 1: Insert at the beginning
        if (position == 0)
        {
            
            newNode-> data = data;
            newNode-> next = head;

            head = newNode;

            if (size == 0) //or if(tail == nullptr)
            {
                tail = newNode; // If list was empty, tail also needs to point to new node
            }
        }

        //Case 2: Insert somewhere in the middle or at the end
        
        else
        {
            
        }

        size ++;
    }


üß† –û—Å—Ç–∞–ª–æ—Å—å —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –≤—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É —Å–ø–∏—Å–∫–∞. –ö–∞–∫–æ–π –∑–¥–µ—Å—å —É –Ω–∞—Å –±—É–¥–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º:

    1. –ú—ã —Ö–æ—Ç–∏–º –≤—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–∑–∏—Ü–∏—é 4. 
    2. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.
    3. –ù—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.
    4. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É–∑–µ–ª –∏ –≤ –µ–≥–æ Next –∑–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å—Å —Ä–∞–Ω–µ–µ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω–æ–≥–æ —É–∑–ª–∞.
    5. –£–∫–∞–∑–∞—Ç–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ—è–ª –Ω–∞ 4–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–¥—Ä–µ—Å—Å –Ω–æ–≤–æ–≥–æ —É–∑–ª–∞.

–ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –º–æ–º–µ–Ω—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—Å–∞—Ç–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞. –¢–æ–≥–¥–∞ –Ω–∞–º —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ tail.


    else
    {
        Node* current = head;

        // Traverse to the node before the insertion point
        for (int i = 0; i < position - 1; i++) 
        {
            current = current->next;
        }

        newNode->data = data;
        
        newNode->next = current->next;
        current->next = newNode;

        // If we inserted at the end, update tail
        if (newNode->next == nullptr) 
        {
            tail = newNode;
        }
    }



üßë‚Äçüíª –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤–µ—Å—å –º–µ—Ç–æ–¥ insert —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

    void insert(int data, int position = 0)
    {
        if (position < 0 || position > size) 
        {
            cout << "Invalid position!\n";
            return;
        }

        Node* newNode = new Node; 

        // Case 1: Insert at the beginning
        if (position == 0)
        {
            
            newNode-> data = data;
            newNode-> next = head;

            head = newNode;

            if (size == 0) 
            {
                tail = newNode; // If list was empty, tail also needs to point to new node
            }
        }

        //Case 2: Insert somewhere in the middle or at the end
        
        else
        {
            Node* current = head;

            // Traverse to the node before the insertion point
            for (int i = 0; i < position - 1; ++i) 
            {
                current = current->next;
            }

            newNode->data = data;

            newNode->next = current->next;
            current->next = newNode;

            // If we inserted at the end, update tail
            if (newNode->next == nullptr) 
            {
                tail = newNode;
            }
        }

        size++;
    }


–¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ –∫—É–¥–∞ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞—à–∏ head –∏ tail

    cout <<(list.head)->data<<endl;
    cout <<(list.tail)->data<<endl;

üëâ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –º–µ–Ω–µ–µ —Å–ª–æ–∂–Ω—ã–º –º–µ—Ç–æ–¥–∞–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ - getAt(int position). –∞–ª–≥–æ—Ä–∏—Ç–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π: –Ω–∞–º –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –≤ —Ü–∏–∫–ª–µ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω—É–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å data –∏–∑ –∏—Å–∫–æ–º–æ–≥–æ —É–∑–ª–∞.

    int at(int position)
    {
       if (position < 0 || position >= size) 
        {
            cout << "Invalid position!\n";
            return -1;
        }

        Node* current = head;

        for (int i = 0; i < position; ++i) 
        {
            current = current->next;
        }

        return current->data;
    }

–ò —Ç—É—Ç –º—ã —Å—Ä–∞–∑—É –≤–∏–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–∞–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ N-–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å N-1 –ø—Ä—ã–∂–∫–æ–≤. –° –º–∞—Å—Å–∏–≤–∞–º–∏ —Ç–∞–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å—Ä–µ–¥–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫—É —É–∫–∞–∑–∞—Ç–µ–ª–µ–π. 

üß† –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–π —Ç–µ–º–µ - –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Ä—Å—Å–º–æ—Ç—Ä–∏–º –∫–ª–∞—Å—Å Node –∏ –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤–æ–ø—Ä–æ—Å - –Ω—É–∂–µ–Ω –ª–∏ –∑–¥–µ—Å—å –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä? –ò –æ—Ç–≤–µ—Ç - –Ω–µ—Ç. –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –û–° –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ new. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—à—å —Ö—Ä–∞–Ω–∏—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å. 

–ù—É–∂–µ–Ω –ª–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤ –∫–ª–∞—Å—Å–µ MyList - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –º—ã –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞–µ–º —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é. –£ —Ç—É—Ç –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–æ–≥–æ –∫–∞–∫ –º—ã –æ—Å–≤–æ–±–æ–∂–¥–∞–ª–∏ –ø–∞–º—è—Ç—å –ø–æ–¥ –º–∞—Å—Å–∏–≤. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–∞–º—è—Ç–∏ —è –º–æ–≥ –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ delete [] arr; –ù–æ –≤—Å–µ –Ω–∞—à–∏ —É–∑–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –ø–∞–º—è—Ç–∏ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ delete [] –º—ã –∏—Ö –Ω–∏–∫–∞–∫ –Ω–µ —É–¥–∞–ª–∏–º. 

‚úÖ –í–æ—Ç –∫–∞–∫ –Ω—É–∂–Ω–æ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å:

    1. –ù–∞—á–∏–Ω–∞–µ–º —Å —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ head. –ù–∞–∑–æ–≤–µ–º –µ–≥–æ current.
    2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∑–µ–ª –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–∫–∞–∑–≤–∞–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é temp.
    3. –£–¥–∞–ª—è–µ–º –ø–∞–º—è—Ç—å –∑–∞–Ω–∏–º–∞–µ–º—É—é current-–æ–º.
    4. –ê —Å–∞–º current —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é temp. 
    5. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ —É current –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª.
    6. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞


    ~MyList() {
        Node* current = head;

        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }

        //(not necessary, but good practice)
        head = nullptr;
        tail = nullptr;
        size = 0;
    }



üìù –ó–∞–¥–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ MyList

–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∞—Å—Å MyList, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–ø–∏—Å–∫–∞. –ö–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç.–¥.) –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–ø–∏—Å–∫–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ head, tail –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é size).

1. int getSize()

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–µ—Ä–Ω—É—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.

–î–µ—Ç–∞–ª–∏: –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π size.

MyList list;
list.pushBack(10);
list.pushBack(20);
cout << list.getSize(); // –í—ã–≤–æ–¥: 2


2. void removeAt(int position)

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å —É–∑–µ–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: position ‚Äî –∏–Ω–¥–µ–∫—Å —É–∑–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å 0.
–ü–æ–≤–µ–¥–µ–Ω–∏–µ:

    –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ ‚â• size), –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ "Invalid position!" –∏ –Ω–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ.
    –ï—Å–ª–∏ position == 0, —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ–≤—É –∏ –æ–±–Ω–æ–≤–∏—Ç—å head.
    –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —É–∑–µ–ª, –æ–±–Ω–æ–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å tail.
    –£–º–µ–Ω—å—à–∏—Ç—å size.


–°–ø–∏—Å–æ–∫: 10 -> 20 -> 30 -> nullptr
removeAt(1);
–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: 10 -> 30 -> nullptr



3. void removeFirst(int data)

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —É–∑–ª–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º data.

–ü–æ–≤–µ–¥–µ–Ω–∏–µ:

    –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –≤—ã–≤–µ—Å—Ç–∏ "Value not found!".
    –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –≥–æ–ª–æ–≤–∞, –æ–±–Ω–æ–≤–∏—Ç—å head.
    –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —Ö–≤–æ—Å—Ç, –æ–±–Ω–æ–≤–∏—Ç—å tail.
    –£–º–µ–Ω—å—à–∏—Ç—å size.

–°–ø–∏—Å–æ–∫: 10 -> 20 -> 30 -> 20 -> nullptr
removeFirst(20);
–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: 10 -> 30 -> 20 -> nullptr


4. void clear()

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫, —É–¥–∞–ª–∏–≤ –≤—Å–µ —É–∑–ª—ã –∏ –æ—Å–≤–æ–±–æ–¥–∏–≤ –ø–∞–º—è—Ç—å.
    –ü–æ–≤–µ–¥–µ–Ω–∏–µ: –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ head –∏ tail –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ nullptr, size –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å 0.


5. void printList()

    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–∞–º–∏.
    –§–æ—Ä–º–∞—Ç: –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å –ø—Ä–æ–±–µ–ª–æ–º –ø–æ—Å–ª–µ.
    –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç: –í—ã–≤–µ—Å—Ç–∏ "List is empty".

–°–ø–∏—Å–æ–∫: 10 -> 20 -> 30 -> nullptr
–í—ã–≤–æ–¥: 10 20 30 


6. bool contains(int value)

–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–µ—Ä–Ω—É—Ç—å true, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∑–µ–ª —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º value, –∏–Ω–∞—á–µ ‚Äî false.

–°–ø–∏—Å–æ–∫: 10 -> 20 -> 30 -> nullptr
contains(20)  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
contains(40)  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false


7. int indexOf(int value)
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å (—Å –Ω—É–ª—è) –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è value.
–ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å -1.

–°–ø–∏—Å–æ–∫: 10 -> 20 -> 30 -> 20 -> nullptr
indexOf(20)  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1
indexOf(40)  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1


üí° –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ, –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.
–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª–∏ head –∏ tail, –∫–æ–≥–¥–∞ —É–¥–∞–ª—è–µ—Ç–µ –ø–µ—Ä–≤—ã–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç.
–¢—â–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ size.
–î–ª—è –º–µ—Ç–æ–¥–æ–≤ contains –∏ indexOf –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª –æ–±—Ö–æ–¥–∞ —Å–ø–∏—Å–∫–∞.
–î–ª—è –º–µ—Ç–æ–¥–∞ clear() –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–π—Ç–µ –≤—Å–µ —É–∑–ª—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª.



üß™ –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

MyList list;
list.pushBack(10);
list.pushBack(20);
list.pushBack(30);
list.pushBack(20);

list.printList(); // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 10 20 30 20 

cout << list.getSize() << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 4

list.removeAt(2);
list.printList(); // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 10 20 20 

list.removeFirst(20);
list.printList(); // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 10 20 

cout << list.contains(30) << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 0 (false)
cout << list.contains(20) << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 1 (true)

cout << list.indexOf(20) << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 1
cout << list.indexOf(40) << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: -1

list.clear();
list.printList(); // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: List is empty
cout << list.getSize() << "\n"; // –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: 0
