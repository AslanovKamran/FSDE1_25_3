üìö –û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏

–û–¥–Ω–æ–π –∏–∑ —Ä–∞–∑–Ω–æ–≤–∏–¥—Ç–µ–π –æ—á–µ—Ä–µ–¥–µ–π —è–≤–ª—è–µ—Ç—Å—è priority queue. –í –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –ø—Ä–∏ push –æ–ø–µ—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –≤—Å—Ç–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ –∫–æ–Ω–µ—Ü –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏. –û–Ω –∑–∞–Ω–∏–º–∞–µ—Ç —Å–≤–æ–µ –º–µ—Å—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–æ—Ä–∏—Ç–µ—Ç—É. –£ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏.

–î–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ queue –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ–Ω priority_queue:

    include <queue>
    
    int main()
    {
        priority_queue <int> container;
        container.push(11);
        container.push(33);
        container.push(22);
    }

‚ùå –î–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ —Å—Ç–µ–∫/–¥–µ–∫ –Ω–µ–ª—å–∑—è –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for. –°—É—Ç—å –≤ —Ç–æ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –í–°–ï–• –∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –º—ã –º–æ–∂–µ–º –≤—ã–¥–µ—Ä–≥–∏–≤–∞—Ç—å –∏—Ö –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —ç—Ç–æ–≥–æ —Ç—É—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:

    cout << container.top() // –î–æ—Å—Ç–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–∞—á–∞–ª–∞

–ò –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —è —É–≤–∏–∂—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ 33, —Ö–æ—Ç—è –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–∞ –æ–±—ã—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —è –±—ã —É–≤–∏–¥–µ–ª 11. –í—Å–µ –¥–µ–ª–æ –≤ —Ç–æ–º –≤ –ø—Ä–æ—Ä–∏—Ç–µ—Ç–∞—Ö. –î–∞–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ - –≤ —Å–ª—É—á–∞–µ —á–∏—Å–µ–ª - –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é. –ò –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —Ç–∞–∫:

    #1    11
    #2    33 11 
    #3    33 22 11


üí° –í —Å–ª—É—á–∞–µ —Å —á–∏—Å–ª–∞–º–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, –∞ —á—Ç–æ –±—É–¥–µ—Ç –µ—Å–ª–∏ –º–æ—è –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö? –ù–∞–ø—Ä–∏–º–µ—Ä –æ—á–µ—Ä–µ–¥—å –∏–∑ Person

    class Person
    {
    public:
        string name;
        int age;

        Person(){}
        Person(string _name, int _age){name = _name; age = _age;}

        void show()
        {
            cout << "Name = " << name << " Age = " << age <<endl; 
        }

    };

    int main()
    {
        priority_queue <Person> container;

        container.push(Person("Ali",18));
        container.push(Person("Kamran",25));
        container.push(Person("Samir",22));

        Person p = container.top();
        p.show();
    }


üëÄ –î–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç. –ë—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –í—Å–µ –¥–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞—à priority_queue –ø–æ–Ω—è—Ç–∏—è –Ω–µ –∏–º–µ–µ—Ç –∫–∞–∫ –µ–º—É –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å 2—Ö –ª—é–¥–µ–π. –ö–∞–∫ –ø–æ–Ω—è—Ç—å —á—Ç–æ Person A –±–æ–ª—å—à–µ —á–µ–º Person B. –í –±–ª–æ–∫–µ –æ—à–∏–±–æ–∫ —É –Ω–∞—Å –¥–∞–∂–µ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä <. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–º–æ–∂–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏. 

üí° –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É–∂–µ –ª–æ–∂–∏—Ç—Å—è –Ω–∞ –Ω–∞—à–∏ –ø–ª–µ—á–∏. –ù–∞–º —Å–∞–º–∏–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç—å —Ç–æ, –ø–æ –∫–∞–∫–æ–º—É (–∏–ª–∏ –∫–∞–∫–∏–º) –∫—Ä–µ—Ç–µ—Ä–∏—è–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–≤—É—Ö –ª—é–¥–µ–π. –Ø —Ä–µ—à–∏–ª —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –∏—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É. –ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∏—Ö –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏–ª–∏ –ø–æ –¥–ª–∏–Ω–µ –∏–º–µ–Ω–∏ - –≤—Å–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —è –º–æ–≥—É –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä < —Ç–∞–∫:

    bool operator<(const Person& other) const 
    {
        // higher age = higher priority
        return age < other.age;  
    }

    bool operator<(const Person& other) const 
    {
        // longer name = higher priority
        return name.length() < other.name.length();  
    }


