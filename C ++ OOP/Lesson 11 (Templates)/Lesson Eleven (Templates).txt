üìö Templates

–°–µ–Ω–æ–¥–Ω—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–µ–º—É —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ-—Ü–∏–∏. –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ü–µ–ª—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Å–ø–æ–º–Ω–∏–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —à–∞–±–ª–æ–Ω–Ω–∞—è —Ñ-—Ü–∏—è

    void print (int data)
    {
        cout << data << endl;
    }

–í —á–µ–º –º–∏–Ω—É—Å –¥–∞–Ω–Ω–æ–π —Ñ-—Ü–∏–∏. –í —Ç–æ–º, —á—Ç–æ –æ–Ω–∞ —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö int. –ï—Å–ª–∏ —è –ø–µ—Ä–µ–¥–∞–º –≤ –Ω–µ–µ —Å–∏–º–≤–æ–ª –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è. 
–ï—Å—Ç—å –¥–≤–∞ —Ä–µ—à–µ–Ω–∏—è:
    
    —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥ –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≥—Ä–µ–∑–∫—É
    —Å–æ–∑–¥–∞—Ç—å –æ–¥–Ω—É —à–∞–±–ª–æ–Ω–Ω—É—é —Ñ-—Ü–∏—é üèÜ 



    template<typename T>
    void print (T data)
    {
        cout << data << end;
    }

    int main ()
    {
        int a = 10;
        float b = 11.5;
        char c = 'A';

        print(a);
        print(b);
        print(c);
    }

üß† –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏ –∫–∞–∫ –≤–æ–æ–±—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ-—Ü–∏–∏. –ù–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –Ω–∞—à –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —á–∏—Ç–∞–µ—Ç –∫–æ–¥ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. –û–Ω –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—É—é —Ñ-—Ü–∏—é –∏ —Å—Ä–∞–∑—É –∏—â–µ—Ç —Ç–µ –º–µ—Å—Ç–∞ –≥–¥–µ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ main. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –∏ –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–º –≤—Å–µ –ø–µ—Ä–µ–≥—Ä–µ–∑–∫–∏. –¢.–µ. –ø–∞ —Ñ–∞–∫—Ç—É –Ω–∏–∫–∞–∫–æ–π —Ñ-—Ü–∏–∏ —Å —Ç–∞–∫–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π —É –Ω–∞—Å –Ω–µ—Ç void print (T data). –ó–¥–µ—Å–± –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ T –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞—Å—Ç –Ω–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –¢.–µ. –ø–æ —Ñ–∞–∫—Ç—É, –ø–æ—Å–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —É –Ω–∞—Å –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –∫–æ–¥:

    void print (int data)
    {
        cout << data << endl;
    }
    void print (float data)
    {
        cout << data << endl;
    }
    void print (char data)
    {
        cout << data << endl;
    }

–ó–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ-—Ü–∏–π –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –≤—ã–Ω–æ—Å–µ –∏—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –º—ã –º–æ–∂–µ–º —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è –ø—Ä–æ–±–ª–µ–º–æ–π –ª–∏–Ω–∫–æ–≤—â–∏–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –≤—ã–Ω–µ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–Ω—É—é —Ñ-—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω—ã .cpp –∏ .h —Ñ–∞–π–ª—ã. –ù–∞–∑–æ–≤–µ–º –∏—Ö Functions.

Functions.h: —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ –ª–∏—à—å –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã

    #pragma once

    template <typename T>
    void print(T data);

Functions.cpp: —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ –∏–ª–∏ —Ñ-—Ü–∏–π

    #include <iostream>

    template <typename T>
    void print(T data)
    {
        std::cout << data << std::endl;
    }

–ù–æ –≤ main-e –º—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –¥–∞–Ω–Ω–æ–π —Ñ-—Ü–∏–∏ –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:


    #include "Functions.h"
    int main()
    {
        int a = 10;
        float  b = 5.5;
        char c = 'A';

        print(a);
        print(b);
        print(c);

        return 0;
    }

üí° –í —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞: –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç—Å—è –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —ç—Ç–æ 2 —Ñ–∞–π–ª–∞ Functions.cpp –∏ –º–æ–π main.cpp.
–ò –≤—Å—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ 1–º —Ñ–∞–π–ª–∞. –í Functions.cpp –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ print, –Ω–æ —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –Ω–µ—Ç –≤—ã–∑–æ–≤–æ–≤, –æ–Ω –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π (–∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–π). –î–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å "–∑–∞–≥–æ—Ç–æ–≤–∫–∞", –∞ –Ω–µ –≥–æ—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è.

–î–∞–ª–µ–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è —Ñ–∞–π–ª main.cpp. –¢—É–¥–∞ —Å—Ä–∞–∑—É –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–¥ –∏–∑ iostream –∏ –∏–∑ Functions.h. –ò —Ç–∞–∫ –∫–∞–∫ –≤ Functions.h –µ—Å—Ç—å –ª–∏—à—å –ø—Ä–æ—Ç–æ—Ç–∏–ø (–±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏) —Ç–æ –ª–∏–Ω–∫–æ–≤—â–∏–∫ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫ —á–µ–º—É –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ-—Ü–∏—é print(a). –¢–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∫–æ–Ω–∫–æ—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ-—Ü–∏–∏ print –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–π print(int)

–¢–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —à–∞–±–ª–æ–Ω–Ω—ã–º–∏. –° –æ–±—ã—á–Ω—ã–º–∏ —Ç–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç.

‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ-—Ü–∏–π –ø—Ä—è–º–æ –≤ .h —Ñ–∞–π–ª–µ. 




üìö Template classes

–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Ç–µ–º–µ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤, –¥–ª—è —ç—Ç–æ–≥–æ –≤—Å–ø–æ–º–Ω–∏–º –Ω–∞—à –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–æ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö IntArray

    class IntArray
    {

    private:

        int* arr = nullptr;
        int size = 0;

    public:

        IntArray() {}
        ~IntArray()
        {
            delete[] arr;
        }
        IntArray(const IntArray& other)
        {
            size = other.size;
            if (size > 0)
            {
                arr = new int[size];
                for (int i = 0; i < size; i++)
                {
                    arr[i] = other.arr[i];
                }
            }
            else
            {
                arr = nullptr;
            }
        }

        void pushBack(const int data)
        {
            int* newArr = new int[size + 1];
            for (int i = 0; i < size; i++)
            {
                newArr[i] = arr[i];
            }
            newArr[size] = data;
            delete[] arr;
            arr = newArr;
            size++;
        }
        int get(int position) const
        {
            if (position < 0 || position >= size)
            {
                //Need to throw an exception here
                cout << ("Index out of range");
            }
            return arr[position];
        }
        int getSize() const
        {
            return size;
        }
        void set(int data, int position)
        {
            if (position < 0 || position >= size)
            {
                //Need to throw an exception here
                cout << ("Index out of range");
            }
            arr[position] = data;
        }
        void insert(int data, int position)
        {
            if (position < 0 || position > size)
            {
                //Need to throw an exception here
                cout << ("Index out of range");
            }

            int* newArr = new int[size + 1];
            for (int i = 0; i < position; i++)
            {
                newArr[i] = arr[i];
            }
            newArr[position] = data;
            for (int i = position; i < size; i++)
            {
                newArr[i + 1] = arr[i];
            }
            delete[] arr;
            arr = newArr;
            size++;
        }
        void removeAt(int position)
        {
            if (position < 0 || position >= size)
            {
                //Need to throw an exception here
                cout << ("Index out of range");
            }
            int* newArr = new int[size - 1];
            for (int i = 0; i < position; i++)
            {
                newArr[i] = arr[i];
            }
            for (int i = position + 1; i < size; i++)
            {
                newArr[i - 1] = arr[i];
            }
            delete[] arr;
            arr = newArr;
            size--;
        }
        void removeAll(int data)
        {
            int count = 0;
            for (int i = 0; i < size; i++)
            {
                if (arr[i] == data)
                {
                    count++;
                }
            }
            if (count == 0)
            {
                return;
            }

            int* newArr = new int[size - count];
            int j = 0;
            for (int i = 0; i < size; i++)
            {
                if (arr[i] != data)
                {
                    newArr[j] = arr[i];
                    j++;
                }
            }
            delete[] arr;
            arr = newArr;
            size -= count;
        }
        int indexOf(int data)
        {
            for (int i = 0; i < size; i++)
            {
                if (arr[i] == data)
                {
                    return i;
                }
            }
            return -1;
        }
        void sort(bool ascending = true)
        {
            for (int i = 0; i < size - 1; i++)
            {
                for (int j = 0; j < size - i - 1; j++)
                {
                    if (ascending)
                    {
                        if (arr[j] > arr[j + 1])
                        {
                            int temp = arr[j];
                            arr[j] = arr[j + 1];
                            arr[j + 1] = temp;
                        }
                    }
                    else
                    {
                        if (arr[j] < arr[j + 1])
                        {
                            int temp = arr[j];
                            arr[j] = arr[j + 1];
                            arr[j + 1] = temp;
                        }
                    }
                }
            }
        }
        void clear() 
        {
            delete[] arr;
            arr = nullptr;
            size = 0;
        }
        void print() const
        {
            for (int i = 0; i < size; i++)
            {
                cout << arr[i] << " ";
            }
            cout << endl;
        }
    
    };

–ì–ª–∞–≤–Ω–æ–π –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–æ–π —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –æ–Ω —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏.

–ò –Ω–∞—à–µ–π –∑–∞–¥–∞—á–µ–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ —à–∞–±–ª–æ–Ω–Ω—ã–π. 

    –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å IntArray –Ω–∞ MyArray
    –ù–∞–¥ —Å–∞–º–∏–º –∫–ª–∞—Å—Å–æ–º –ø—Ä–æ–ø–∏—Å–∞—Ç—å template <class T>
    –í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞–º —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å –∫–∞–∫–∏–º –º–∞—Å—Å–∏–≤–æ–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º 
        MyArray<int> nums;
    –í—Å–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ int-—ã –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ T.