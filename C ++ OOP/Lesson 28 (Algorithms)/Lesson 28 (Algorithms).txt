üìö –ê–ª–≥–æ—Ä–∏—Ç–º—ã –≤ STL

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:

    #include <algorithm>
    #include <numeric>


–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏, –∏–∑–±–∞–≤–ª—è—è—Å—å –æ—Ç —Ä—É—Ç–∏–Ω—ã –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ü–∏–∫–ª–æ–≤. –ü–æ–¥—Ä–æ–±–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ cppreference .

üîπ –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–ü—É—Å—Ç—å —É –Ω–∞—Å –µ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä –∏–∑ —Ä–∞–Ω–¥–æ–º–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.

    vector<int> numbers = {55,22,11,77,33,44}



–ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—Å–µ –ª–∏ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ 20. –ë–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø—Ä–∏—à–ª–æ—Å—å –±—ã –ø–∏—Å–∞—Ç—å —Ç–∞–∫. –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ñ-—Ü–∏–π –Ω–∞–º –±—ã –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ü–∏–∫–ª –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–º –ø—Ä–∏—à–ª–æ—Å—å –±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º:

    bool isOk = true;
    for(int i = 0; i < container.size(); i ++)
    {
        if(container[i] < 20)
        {
            isOk = false;
            break;
        }
    }

    cout << (isOk ? "Yes" : "No") << endl;


üí° –û—Ç –≤—Å–µ—Ö —ç—Ç–∏—Ö —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –º–æ–∂–Ω–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É—è —Ñ-—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ algorithm.

üîπ all_of
–¢–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä –¥–ª—è –Ω–∞—à–µ–π –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ-—Ü–∏—è all_of –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞–∫–æ–º—É-—Ç–æ —É—Å–ª–æ–≤–∏—é.

–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç–∞–∫–æ–≤:

    bool all_of(InputIt first, InputIt last, UnaryPredicate p);

    first ‚Äî –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    last ‚Äî –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    p ‚Äî –ø—Ä–µ–¥–∏–∫–∞—Ç (—Ñ—É–Ω–∫—Ü–∏—è), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞


–°–∞–º—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∑–¥–µ—Å—å - —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –ü—Ä–µ–¥–∏–∫–∞—Ç —ç—Ç–æ –Ω–∏ —á—Ç–æ –∏–Ω–æ–µ –∫–∞–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Ñ-—Ü–∏—é. –ù–∞ –º–µ—Å—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ p –º—ã –±—É–¥–µ–º –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –∏–º—è –Ω–∞—à–µ–π —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–æ–ø–∏—à–µ–º:

    bool MoreThan20(int x)
    {
        return x > 20;
    }

–ò —Ç–µ–ø–µ—Ä—å –≤–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞—à –∫–æ–¥:

    bool result = all_of(numbers.begin(), numbers.end(), MoreThan20);
    cout << (result ? "Yes" : "No") << endl;


üí° –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º:

    ‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç begin().
    ‚Ä¢ –ü–µ—Ä–µ–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–µ–¥–∏–∫–∞—Ç (MoreThan20).
    ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false, –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É (–∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Ñ-—Ü–∏–∏ all_of)
    ‚Ä¢ –ò–Ω–∞—á–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä —Å–º–µ—â–∞–µ—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É.
    ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∏–ª–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ false.

–í–º–µ—Å—Ç–æ –Ω–∞—à–µ–π —Ñ-—Ü–∏–∏ MoreThan20 –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ª—é–±—É—é –¥—Ä—É–≥—É—é, –æ—Ç–≤–µ—á–∞—é—â—É—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –ø—Ä–µ–¥–∏–∫–∞—Ç–∞.

üß† –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –µ—â–µ —Å–∏–ª—å–Ω–µ–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ-—Ü–∏–∏:

    bool result = all_of(numbers.begin(), numbers.end(), [](int x) {return x > 20});
    cout << (result ? "Yes" : "No") << endl;

–î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª—è–º–±–¥–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º. –ò—Ö –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ.


üìÉ –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ <algorithm>


üîπ any_of
–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∞–Ω–∞–ª–æ–≥–∞ –≤—ã—à–µ, –¥–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 1 —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é.


    bool LessThan15(int x)
    {
        return x < 15;
    }

    int main()
    {
        vector<int> numbers = {55, 22, 11, 77, 33, 44};

        bool result = any_of(numbers.begin(), numbers.end(), LessThan15);

        cout << (result ? "True" : "False") << endl;
    }


üîπ none_of
–î–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é.

    bool IsNegative(int x)
    {
        return x < 0;
    }

    int main()
    {
        vector<int> numbers = {10, 20, 30, 40};

        bool result = none_of(numbers.begin(), numbers.end(), IsNegative);

        cout << (result ? "All positives" : "At least one negative") << endl;
    }

üîπ count –∏ count_if

–§—É–Ω–∫—Ü–∏—è count –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
–∞ count_if ‚Äî –ø–æ —É—Å–ª–æ–≤–∏—é.


    bool GreaterThan25(int x)
    {
        return x > 25;
    }

    int main()
    {
        vector<int> numbers = {10, 20, 30, 40, 30, 50};

        int count30 = count(numbers.begin(), numbers.end(), 30);
        int countGreater = count_if(numbers.begin(), numbers.end(), GreaterThan25);

        cout << "–ß–∏—Å–ª–æ 30 –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è " << count30 << " —Ä–∞–∑(–∞)" << endl;
        cout << "–ß–∏—Å–µ–ª –±–æ–ª—å—à–µ 25: " << countGreater << endl;
    }


üîπ find

–ò—â–µ—Ç –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.

    int main()
    {
        vector<int> numbers = {10, 20, 30, 40};

        auto iter = find(numbers.begin(), numbers.end(), 30);

        if (iter != numbers.end())
            cout << "–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: " << *iter << endl;
        else
            cout << "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" << endl;
    }


üîπ sort

–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è.

    int main()
    {
        vector<int> numbers = {44, 11, 33, 22};

        sort(numbers.begin(), numbers.end());

        cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ";
        for (int i = 0; i < numbers.size(); i++)
            cout << numbers[i] << " ";
    }


‚öôÔ∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ count, find, sort –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–æ–≤

–ö–æ–≥–¥–∞ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–µ —Å –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ (int, double, string), –∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤, STL-–∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —ç—Ç–∏ –æ–±—ä–µ–∫—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π.

–ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ STL –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø–æ-—Å–≤–æ–µ–º—É ‚Äî –Ω–æ –≤—Å–µ –æ–Ω–∏ –æ–ø–∏—Ä–∞—é—Ç—Å—è –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (==, < –∏ —Ç.–ø.).


üîπ count –∏ find

–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ.
–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä ==.


    class Person
    {
    public:
        string name;
        int age;

        Person(string n, int a) : name(n), age(a) {}

        bool operator==(const Person& other) const
        {
            return name == other.name && age == other.age;
        }
    };

    int main()
    {
        vector<Person> people = {
            {"Tom", 20},
            {"Jerry", 25},
            {"Tom", 20}
        };

        Person target("Tom", 20);

        int result = count(people.begin(), people.end(), target);
        cout << "–ù–∞–π–¥–µ–Ω–æ: " << result << endl;

        auto it = find(people.begin(), people.end(), target);
        if (it != people.end())
            cout << "–ù–∞–π–¥–µ–Ω: " << it->name << " " << it->age << endl;
    }


‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:
–ù–∞–π–¥–µ–Ω–æ: 2
–ù–∞–π–¥–µ–Ω: Tom 20


üîπ sort

–§—É–Ω–∫—Ü–∏—è sort() —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <,
–µ—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.

    class Person
    {
    public:
        string name;
        int age;

        Person(string n, int a) : name(n), age(a) {}

        bool operator<(const Person& other) const
        {
            return age < other.age;
        }
    };

    int main()
    {
        vector<Person> people = {
            {"Tom", 20},
            {"Jerry", 25},
            {"Anna", 18}
        };

        sort(people.begin(), people.end());

        for (auto& p : people)
            cout << p.name << " " << p.age << endl;
    }


‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:
Anna 18
Tom 20
Jerry 25


üîπ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é

–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–∏–∂–∏–º—ã–º, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–∫ —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä:

    bool CompareByName(const Person& a, const Person& b)
    {
        return a.name < b.name;
    }

    sort(people.begin(), people.end(), CompareByName);

    ‚úÖ –¢–µ–ø–µ—Ä—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ –∏–º–µ–Ω–∏, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –∫–ª–∞—Å—Å–∞.



üßπ –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω—É–ª–∏)
–ü—Ä—è–º–æ–≥–æ —Ç–∞–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≤ STL –Ω–µ—Ç. –û–¥–Ω–∞–∫–æ –¥–æ–±–∏—Ç—å—Å—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é 2—É—Ö –¥—Ä—É–≥–∏—Ö —Ñ-—Ü–∏–π.


–ê–ª–≥–æ—Ä–∏—Ç–º remove_if –Ω–µ —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏, –∞ –ª–∏—à—å ‚Äú—Å–¥–≤–∏–≥–∞–µ—Ç‚Äù –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–æ–≤—É—é ‚Äú–≥—Ä–∞–Ω–∏—Ü—É‚Äù.

–ê –º–µ—Ç–æ–¥ erase —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.

–°–æ–≤–º–µ—Å—Ç–∏–≤ —ç—Ç–∏ –¥–≤–µ —Ñ-—Ü–∏–∏ –º–æ–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–≤–∏–Ω—É—Ç—å –≤—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –∏ –ø–æ–ª—É—á–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª–æ —Ü–µ–ø–∏ –Ω–µ–Ω—É–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. 

–ó–∞—Ç–µ–º –Ω–∞—á–∞–≤ —Å —ç—Ç–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–æ –∫–æ–Ω—Ü–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞—á–∞—Ç—å —É–¥–∞–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.

–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç üëá



    bool IsZero(int x)
    {
        return x == 0;
    }


    int main()
    {
        vector<int> numbers = {1, 0, 5, 0, 3, 0, 7};

        // remove_if "—Å–¥–≤–∏–≥–∞–µ—Ç" –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω—É–ª–∏) –≤ –∫–æ–Ω–µ—Ü
        auto newEnd = remove_if(numbers.begin(), numbers.end(), IsZero);

        cout << "After removing\n\n";

        for (int n : numbers)
            cout << n << " ";
       

        // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º ‚Äú—Ö–≤–æ—Å—Ç‚Äù
        numbers.erase(newEnd, numbers.end());

        cout << "\n\nAfter erasing\n\n";

        for (int n : numbers)
            cout << n << " ";
    }

üî∏ –ß—Ç–æ –∑–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç

    remove_if –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º.

    –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ, ‚Äú—Å–¥–≤–∏–≥–∞—é—Ç—Å—è‚Äù –≤ –Ω–∞—á–∞–ª–æ.

    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –Ω–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Å–¥–≤–∏–Ω—É—Ç—ã–µ (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ) —ç–ª–µ–º–µ–Ω—Ç—ã.

    –ú—ã –≤—ã–∑—ã–≤–∞–µ–º erase –æ—Ç —ç—Ç–æ–≥–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ end(), —á—Ç–æ–±—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å —Ö–≤–æ—Å—Ç.


–û–¥–Ω–∞–∫–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:

  list<int> numbers = {1, 5, 3, 5, 7, 5, 9};
    numbers.remove(5); // —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ—Ç –≤—Å–µ 5-–∫–∏

    for (int n : numbers)
        cout << n << " ";