üìö –î–µ–∫

‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ Deque (Double-Ended Queue)

Deque (–¥–µ–∫) ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ —Å –Ω–∞—á–∞–ª–∞, —Ç–∞–∫ –∏ —Å –∫–æ–Ω—Ü–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç Double-Ended Queue ‚Äî ¬´–æ—á–µ—Ä–µ–¥—å —Å –¥–≤—É–º—è –∫–æ–Ω—Ü–∞–º–∏¬ª.

| –ú–µ—Ç–æ–¥       | –û–ø–∏—Å–∞–Ω–∏–µ                                   |
| ----------- | ------------------------------------------ |
| `pushFront` | –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ                  |
| `pushBack`  | –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü                   |
| `popFront`  | –£–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞—á–∞–ª–∞         |
| `popBack`   | –£–¥–∞–ª–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–Ω—Ü–∞          |
| `peekFront` | –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–µ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è) |
| `peekBack`  | –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω—Ü–µ (–±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è)  |


üí¨ –ß–µ–º –¥–µ–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞?

–°–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã–º, —Ç–∞–∫ –∏ –¥–≤—É—Å–≤—è–∑–Ω—ã–º, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.

–î–µ–∫ ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–≥–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º/—É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω—Ü–æ–≤.

–¢–æ –µ—Å—Ç—å –¥–µ–∫ ‚Äî —ç—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–ø–∏—Å–∫–∞, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ. –û–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω—É.

üß© –í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ –≤–∑—è—Ç—å –∑–∞ –æ—Å–Ω–æ–≤—É –¥–µ–∫–∞ –Ω–µ –º–∞—Å—Å–∏–≤ –∞ —Å–ø–∏—Å–æ–∫,–≤ –∫–æ—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—è–º.

ü§î –ü–æ—á–µ–º—É –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–µ–∫–∞?

–ü–æ—Ç–æ–º—É —á—Ç–æ:

    –í –º–∞—Å—Å–∏–≤–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ pushFront –∏ popFront —Ç—Ä–µ–±—É—é—Ç —Å–¥–≤–∏–≥–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (O(n))
    –í —Å–ø–∏—Å–∫–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è (O(1))


‚úÖ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤—É—Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

üë∑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞:

    struct Node
    {
        int data;
        Node* next;
        Node* prev;
    };

    class Deque
    {
    private:
        Node* head = nullptr;
        Node* tail = nullptr;
        int size = 0;

    public:

        void pushFront(int data)
        {
            Node* newNode = new Node{data, head, nullptr};

            if (head != nullptr)
                head->prev = newNode;
            else
                tail = newNode; // –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, —Ö–≤–æ—Å—Ç = –≥–æ–ª–æ–≤–∞

            head = newNode;
            size++;
        }

        void pushBack(int data)
        {
            Node* newNode = new Node{data, nullptr, tail};

            if (tail != nullptr)
                tail->next = newNode;
            else
                head = newNode;

            tail = newNode;
            size++;
        }

        int popFront()
        {
            if (isEmpty())
            {
                cout << "Deque is empty!" << endl;
                return -1;
            }

            int value = head->data;
            Node* temp = head;
            head = head->next;

            if (head != nullptr)
                head->prev = nullptr;
            else
                tail = nullptr; // –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º

            delete temp;
            size--;
            return value;
        }

        int popBack()
        {
            if (isEmpty())
            {
                cout << "Deque is empty!" << endl;
                return -1;
            }

            int value = tail->data;
            Node* temp = tail;
            tail = tail->prev;

            if (tail != nullptr)
                tail->next = nullptr;
            else
                head = nullptr;

            delete temp;
            size--;
            return value;
        }

        int peekFront()
        {
            if (isEmpty())
            {
                cout << "Deque is empty!" << endl;
                return -1;
            }

            return head->data;
        }

        int peekBack()
        {
            if (isEmpty())
            {
                cout << "Deque is empty!" << endl;
                return -1;
            }

            return tail->data;
        }

        bool isEmpty()
        {
            return size == 0;
        }

        int getSize()
        {
            return size;
        }

        void print()
        {
            Node* current = head;
            cout << "Deque: ";
            while (current != nullptr)
            {
                cout << current->data << " ";
                current = current->next;
            }
            cout << endl;
        }

        void clear()
        {
            while (!isEmpty())
            {
                popFront();
            }
        }

        ~Deque()
        {
            clear();
        }
    };



    int main()
    {
        Deque dq;

        dq.pushBack(10);
        dq.pushBack(20);
        dq.pushFront(5);
        dq.pushFront(1);

        dq.print(); // 1 5 10 20

        cout << "Front: " << dq.peekFront() << endl; // 1
        cout << "Back: " << dq.peekBack() << endl;   // 20

        dq.popFront(); // —É–¥–∞–ª–∏—Ç 1
        dq.popBack();  // —É–¥–∞–ª–∏—Ç 20

        dq.print(); // 5 10
    }

üßë‚Äçüíª –í –°++ –µ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–ª–∞—Å—Å–æ–≤, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Ç–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã –∫–∞–∫ array, string, vector –∏ —Ç.–¥. –¢–∞–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –µ—Å—Ç—å –≤–æ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –û–Ω–∏ —É–ø—Ä–æ—â–∞—é—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –Ω–µ –≤–¥–∞–≤–∞—è—Å—å –≤ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

–°–∞–º—ã–º –ø–µ—Ä–≤—ã–º —Ç–∞–∫–∏–º –∫–ª–∞—Å—Å–æ–º –±—ã–ª –∫–ª–∞—Å—Å string, –¥–∞–ª–µ–µ –º—ã —Å –≤–∞–º–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ array –∏ vector.

üß† –í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–ª–∞—Å—Å—ã 

    include<list>            –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—É Node –µ—Å—Ç—å prev –∏ next) 
    include<forward_list>    –æ–¥–Ω–æ–Ω–æ–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—É Node –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ next)

–ß–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–º–µ–Ω–Ω–æ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ —Ö–æ—Ç—å –æ–Ω –∏ –∑–∞–Ω–∏–º–∞–µ—Ç —á—É—Ç—å –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ.

    include<stack>
    include<queue>
    include<deque>

–ü—Ä–∏—á–µ–º –≤—Å–µ –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è —à–∞–±–ª–æ–Ω–Ω—ã–º–∏. –í –°++ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞–∑—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–≤ C# –∏—Ö —á–∞—Å—Ç–æ –Ω–∞–∑—ã–≤–∞—é—Ç Generic Collections)

–†–∞–±–æ—Ç–∞–µ–º –º—ã —Å–æ –≤—Å–µ–º–∏ —ç—Ç–∏–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ —Å vector.

    list<int> container;

    container.push_back(10);
    container.push_back(20);
    container.push_back(30);
    
    container[0]; ‚ùå 

