üìö –ö–õ–Æ–ß–ï–í–û–ï –°–õ–û–í–û THIS


üß© –°–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–µ–º—É —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ this.
–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–º–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –ø–æ–ª—è –≤ –º–µ—Ç–æ–¥–∞—Ö.

    class Test
    {
    public:
        int x; 
        double y;

        void setX(int x) 
        {
            x = x;
        }

        void show() 
        {
            cout << "x: " << x << ", y: " << y << endl;
        }

    private:

    };

‚ùî –ö–∞–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∑–¥–µ—Å—å: –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–µ—Ç–µ—Ä–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∑–Ω–∞–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ x –Ω–µ –º–æ–µ–º—É –ø–æ–ª—é —Ö, –∞ —Å–∞–º–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É, –¥–µ–ª–∞—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é - –Ω–∏–∫–∞–∫–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç. 


üßë‚Äçüíª –î–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, —Å–∞–º—ã–º –æ—á–µ–≤–∏–¥–Ω—ã–º –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å —Ö –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ. –û–¥–Ω–∞–∫–æ –≤–æ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–∞—Ö –µ—Å—Ç—å —Å–∫—Ä—ã—Ç–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–∞–º –æ–±—ä–µ–∫—Ç –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º this. –û–Ω–æ –Ω–µ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–≥–æ –º–µ—Å—Ç–∞ –≤ –ø–∞–º—è—Ç–∏. –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—á–∞—Å—Ç–∫—É –ø–∞–º—è—Ç–∏, –≥–¥–µ –ª–µ–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º. –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –º—ã –≤—Å–µ –≤—Ä–µ–º—è —Å –Ω–∏–º –Ω–µ—è–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ –≤ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤. 


üí° –°—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ —É –Ω–∞—Å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—è, –∞ –º–µ—Ç–æ–¥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ—Ç. –≠—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ sizeof. –í—Å–µ —ç—Ç–∏ –º–µ—Ç–æ–¥–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≥–¥–µ-—Ç–æ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏, –∫–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Ñ-—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–∏—Å–∞–ª–∏ –¥–æ –û–û–ü. –ò –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–∏–º –¥–ª—è –≤—Å–µ—Ö –µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤. –ù–æ —Ç–æ–≥–¥–∞ –∫–∞–∫ –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ



    Test t1;
    t1.x = 10;
    t1.y = 20.5;

    Test t2;
    t2.x = -50;
    t2.y = -100.5;

    t1.show();
    t2.show();

–í—ã–∑—ã–≤–∞—è –º–µ—Ç–æ–¥ show –æ—Ç –∏–º–µ–Ω–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –æ–Ω –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ —Ä–∞–∑–Ω–æ–º—É, –≤—ã–≤–æ–¥—è –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—è –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. 


üîç –í—Å–µ –¥–µ–ª–æ –≤ —Ç–æ–º –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à –ú–ï–¢–û–î show —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –§-–¶–ò–Æ, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ —Å–µ–±—è –ø—Ä–∏–Ω–∏–º–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞.

    void show(Test* _thisObject)
    {
        cout << "x: " << _thisObject.x << ", y: " << _thisObject.y<< endl;
    }

–ò —Ç–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ-—Ü–∏—è —Ç–æ—á–Ω–æ –∑–Ω–∞–µ—Ç —Å –∫–∞–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –∫–∞–∫–∏–µ –ø–æ–ª—è –µ—Å—Ç—å —É —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. 


‚úÖ –ü–æ —Ñ–∞–∫—Ç—É –≤–æ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–∞—Ö –º–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ –∫–∞–∫ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ this, –¥–∞–≤–∞—è –º–µ—Ç–æ–¥—É –ø–æ–Ω—è—Ç—å —Å –∫–∞–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º –æ–Ω —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢.–µ. –º–æ–π –º–µ—Ç–æ–¥ show –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –≤ —Ç–∞–∫–æ–π –≤–æ—Ç –∫–æ–¥

        void show() 
        {
            cout << "x: " << this->x << ", y: " << this->y << endl;
            cout << this << endl; //—É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç
        }

–í—ã –Ω–µ –æ–±—è–∑–∞–Ω—ã –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–µ—Ç–æ–¥–∞–º–∏, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∑–∞ –≤–∞—Å. –û–¥–Ω–∞–∫–æ, –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—É, –∫–∞–∫–æ–µ –ø–æ–ª—è —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–µ–º –æ–±—ä–µ–∫—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä —Ç—É—Ç

        void setX(int x) 
        {
            x = x;
        }
–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫ –∫–æ–º—É –∏–∑ –Ω–∏—Ö –ø—Ä–∏–ø–∏—Å–∞—Ç—å this->. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —è –º–æ–≥—É –µ–º—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å:

        void setX(int x) 
        {
            this->x = x;
        }


üß† –ï—â–µ –æ–¥–Ω–∏–º —É–º–æ–∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º –∏–∑ —ç—Ç–æ–≥–æ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ –¥–∞–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —è –Ω–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∞—Ö. this —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –æ–±—ä–µ–∫—Ç, –∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –æ–±—ä–µ–∫—Ç—É. –≠—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞.

    static void staticShow() 
    {
        cout << x; // Error: cannot access non-static member 'x' in a static member function ‚ùå
        cout << this->x; // Error: cannot use 'this' pointer in a static member function     ‚ùå
    } 


‚öôÔ∏è –î–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –û–û–ü—à–Ω—ã—Ö —è–∑—ã–∫–∞—Ö. –≠—Ç–æ –Ω–µ –≤—Å–µ –µ–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –Ω–∞–º —Ö–≤–∞—Ç–∏—Ç –∏ —ç—Ç–æ–≥–æ.


üìö –†–ê–ó–ë–ò–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê –ü–û –§–ê–ô–õ–ê–ú


–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–æ, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç. –î–ª—è —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É ToDoList. –£ –Ω–∞—Å –∑–¥–µ—Å—å 2 –∫–ª–∞—Å—Å–∞ Task –∏ TaskList. –ù–∞–ª–∏—á–∏–µ –∏—Ö –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ cpp —Ñ–∞–ª–µ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –º—ã —Å –≤–∞–º–∏ –±—É–¥–µ–º —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ 10-50—Ç–∏ –∫–ª–∞—Å—Å–æ–≤. –ò –¥–µ—Ä–∂–∞—Ç—å –∏—Ö –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç –Ω–µ –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ.

–†–µ—à–µ–Ω–∏–µ - –≤—ã–¥–µ–ª—è—Ç—å –ø–æ–¥ –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª. –ö–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è:

1. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Header Files. 
    
    –ò–º—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞
    –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å .h
    –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –±—É–¥–µ—Ç –ª–∏—à—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ - –µ–≥–æ –ø–æ–ª—è –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –º–µ—Ç–æ–¥–æ–≤.

    #pragma once

    #include <string>

    class Task
    {
    private:

        std::string description;
        bool completed = false;

    public:
        Task();
        Task(std::string description);

        std::string getDescription();
        bool isCompleted();
        void setDescription(std::string description);
        void markCompleted();
        void markIncomplete();
        void display();

    };



2. –î–∞–ª–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π cpp —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ Source Files. 
    
    –ò–º—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –Ω–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞
    –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å .cpp
    –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥–ª—é—á–∏—Ç—å —Ä–∞–Ω–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª
    –ó–∞—Ç–µ–º –º—ã –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–æ—Å—Ç–∞–≤–∏–≤ –ø—Ä–∏–ø–∏—Å–∫—É –≤–Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

    #include "Task.h"

    Task::Task()
    {
	    this->description = "";
	    this->completed = false;
    }

    Task::Task(std::string description)
    {
        this->description = description;
        completed = false;
    }

    std::string Task::getDescription()
    {
        return description;
    }
    bool Task::isCompleted()
    {
        return completed;
    }

    void Task::setDescription(std::string description)
    {
        this->description = description;
    }

    void Task::markCompleted()
    {
        completed = true;
    }
    void Task::markIncomplete()
    {
        completed = false;
    }
    void Task::display()
    {
        std::cout << (completed ? "[X] " : "[ ] ") << description << std::endl;
    }

–ò —Ç–µ–ø–µ—Ä—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –≤ —Ñ-—Ü–∏–∏ main –º–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å "Task.h" –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö include-–æ–≤.


üí° –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ –º–µ—Ç–æ–¥–µ —É –í–∞—Å –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Header —Ñ–∞–π–ª–µ –Ω–µ –Ω—É–∂–Ω–æ, –∏–Ω–∞—á–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–∫–æ–º—Ä–∏–ª–∏—Ä—É–µ—Ç—Å—è:

    Task(std::string description, bool completed); ‚úÖ
    Task(std::string description, bool completed = false); ‚ùå

–ê –ª—É—á—à–µ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

    Task(std::string, bool); ‚úÖ‚úÖ‚úÖ



üéØ –í–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –ö–ª–∞—Å—Å TaskList.

–ó–∞–≥–æ–ª–æ–≤–æ—á–Ω—ã–π —Ñ–∞–π–ª:

    #pragma once

    #include "Task.h"

    class TaskList
    {
    private:
        int taskCount;
        Task* tasks;

    public:

        TaskList() {}
        ~TaskList() {}
        void AddTask(Task);
        void DisplayTasks();
        void MarkTaskCompleted(int);
    };

–°—Ä—Ä —Ñ–∞–π–ª:

    #include "TaskList.h"

    TaskList::TaskList()
    {
        tasks = nullptr;
        taskCount = 0;
    }
    TaskList::~TaskList()
    {
        delete[] tasks;
    }

    void TaskList::AddTask(Task t)
    {
        Task* temp = new Task[taskCount + 1];
        for (int i = 0; i < taskCount; i++)
        {
            temp[i] = tasks[i];
        }
        temp[taskCount] = t;
        delete[] tasks;
        tasks = temp;
        taskCount++;
    }
    void TaskList::DisplayTasks()
    {
        for (int i = 0; i < taskCount; i++)
        {
            tasks[i].display();
        }
    }
    void TaskList::MarkTaskCompleted(int index)
    {
        if (index >= 0 && index < taskCount)
        {
            tasks[index].markCompleted();
        }
    }

–ò —Ç–µ–ø–µ—Ä—å —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ main —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:

    int main()
    {
        TaskList myTasks;
        myTasks.AddTask(Task("Buy groceries"));
        myTasks.AddTask(Task("Walk the dog"));
        myTasks.AddTask(Task("Read a book"));
        myTasks.MarkTaskCompleted(1); // Mark "Walk the dog" as completed
        myTasks.DisplayTasks();
    }
