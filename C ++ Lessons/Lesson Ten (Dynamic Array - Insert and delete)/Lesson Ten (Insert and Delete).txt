üëá –°–µ–≥–æ–¥–Ω—è –º—ã —Ä–∞–∑–±–µ—Ä–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –º–∞—Å—Å–∏–≤–∞—Ö. 

–ú—ã —É–∂–µ –∑–Ω–∞–µ–º –∫–∞–∫ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –¥—Ä—É–≥–æ–π, –∏ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞–º –æ—á–µ–Ω—å –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è! –í–µ–¥—å –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–º —á–∞—Å—Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–µ—Å—å –º–∞—Å—Å–∏–≤.

üîç –ü—Ä–æ–±–ª–µ–º–∞: –ø–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ "—Ä–∞—Å—à–∏—Ä–∏—Ç—å" –º–∞—Å—Å–∏–≤?
–ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:

    int* arr = new int[5] {10, 20, 30, 40, 50};

–ß—Ç–æ –µ—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç? –ú–æ–∂–µ–º –ª–∏ –º—ã –ø—Ä–æ—Å—Ç–æ "–ø–æ–ø—Ä–æ—Å–∏—Ç—å" —É —Å–∏—Å—Ç–µ–º—ã –µ—â–µ –æ–¥–Ω—É —è—á–µ–π–∫—É –ø–∞–º—è—Ç–∏ —Ä—è–¥–æ–º?

‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ù–ï–¢! –ü–∞–º—è—Ç—å –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏. –ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ "–¥–æ–ø–∏—Å–∞—Ç—å" –µ—â–µ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —è—á–µ–π–∫–∞–ø–∞–º—è—Ç–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.

üß† –†–µ—à–µ–Ω–∏–µ: –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç—É–¥–∞ –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã + –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π. –û–¥–Ω–∞–∫–æ –∏ –∑–¥–µ—Å–± –µ—Å—Ç—å —Å–≤–æ–∏ –Ω—å—é–∞–Ω—Å—ã. –¢–∞–∫ –∫–∞–∫ —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –≤ –Ω–∞—á–∞–ª—Ä–æ –∏–ª–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞. –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–µ—Ä–µ–º —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü. –î–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è append –∏ –≤ 99% —Å–ª—É—á–∞–µ–≤ –º—ã –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.

–ê–ª–≥–æ—Ä–∏—Ç–º —Ç–∞–∫–æ–π:

‚Ä¢ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–º +1 —ç–ª–µ–º–µ–Ω—Ç
‚Ä¢ –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
‚Ä¢ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤
‚Ä¢ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤

    int main()
    {
    	int oldSize = 5;
    	int newsSize = oldSize + 1;

    	int* arr = new int[oldSize] {10, 20, 30, 40, 50};

    	cout << "Old array: " << endl;
    	ShowArray(arr, oldSize);

    	// Create new array with new size
    	int* newArrTempPointer = new int[newsSize];

    	// Copy old array to new array
    	for (int i = 0; i < oldSize; i++) 
    	{
    		newArrTempPointer[i] = arr[i]; // last cell is still empty
    	}

    	newArrTempPointer[newsSize - 1] = 60; // add new element to the last cell

    	delete[] arr; // free old array memory

    	// point old array pointer to new array
    	arr = newArrTempPointer; 

    	// avoid dangling pointer
    	newArrTempPointer = nullptr; 

    	cout << "New array: " << endl;
    	ShowArray(arr, newsSize);
    }

üë©‚Äçüéì –û–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º—ã —É–º–µ–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞. –í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —Ç–æ, —á—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–º –Ω—É–∂–µ–Ω –ª–∏—à—å —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç. –ü–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–æ—Å–∏–º. 

üí° –í—Å—Ç–∞–≤–∫–∞ –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ —ç—Ç–æ –∫—É–¥–∞ –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏–π, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π. –í–æ –ø–µ—Ä–≤—ã—Ö –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–ª—É—á–∞—è , –∑–¥–µ—Å—å –º—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –∏–Ω–¥–µ–∫—Å –∫—É–¥–∞ –µ–≥–æ –≤—Å—Ç–∞–≤–∏—Ç—å. 

üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞: –í—Å—Ç–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ-—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏. –û–Ω–∏ –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –ø–æ—Å–ª–µ:

    int main()
    {
    	int oldSize = 5;
    	int newSize = oldSize + 1;

    	int newElement = -100;
    	int insertIndex = 2;

    	int* arr = new int[oldSize] {10, 20, 30, 40, 50};

    	cout << "Old array: " << endl;
    	ShowArray(arr, oldSize);

    	// Create new array with new size
    	int* newArrTempPointer = new int[newSize];

    	//Copy elements to new array until insert index
    	for (int i = 0; i < insertIndex; i++) 
    	{
    		newArrTempPointer[i] = arr[i];
    	}

    	// Insert new element at insert index
    	newArrTempPointer[insertIndex] = newElement;

    	//Copy the rest of the elements after insert index

    	for (int i = insertIndex; i < oldSize; i++)
    	{
    		newArrTempPointer[i + 1] = arr[i];
    	}

    	delete[] arr;
    	arr = newArrTempPointer;
    	newArrTempPointer = nullptr;
    
    	cout << "New array: " << endl;
    	ShowArray(arr, newSize);

    }

üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä, –ª–∏–±–æ –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞, –∞ –º—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:

‚Ä¢ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ä–∞–∑–º–µ—Ä–æ–º -1 —ç–ª–µ–º–µ–Ω—Ç
‚Ä¢ –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ö–†–û–ú–ï —É–¥–∞–ª—è–µ–º–æ–≥–æ
‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤
‚Ä¢ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤

üîù –û–¥–Ω–∞–∫–æ —Å—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω—É—é –≤–µ—â—å. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –∫–æ–≥–¥–∞ –º—ã —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç, –∏–Ω–¥–µ–∫—Å—ã –≤ —Å—Ç–∞—Ä–æ–º –∏ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ —ç—Ç–æ–º—É –Ω–∞–º –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –æ–±–æ–π—Ç–∏ —ç—Ç–æ—Ç —Å–ª—É—á–∞–π. –ú–æ–∂–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–ø—Ä–∏–º–µ—Ä newIndex, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –∑–∞ –∏–Ω–¥–µ–∫—Å—ã –≤ –Ω–æ–≤–æ–º –º–∞—Å—Å–∏–≤–µ. –ò –≤ –º–æ–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –º—ã –¥–æ–π–¥–µ–º –¥–æ –Ω–µ–∂–µ–ª–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º—ã –ø—Ä–∏–±–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ä–æ–≥–æ, –Ω–æ –Ω–µ –ø—Ä–∏–±–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º newIndex –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –º—ã —Ä–µ–∞–ª—å–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.


    int main()
    {
    	int size = 5;
    	int newSize = size - 1;
    	int deletedIndex = 2; 

    	int* arr = new int[size] {10, 20, 30, 40, 50};
    	cout << "Original array: ";
    	ShowArray(arr, size);
    	cout << endl << endl;

    	int* newArrTemp = new int[newSize];

    	int newIndex = 0;
    	for (int i = 0; i < size; i++) 
    	{
    		if (i != deletedIndex) 
    		{
    			newArrTemp[newIndex] = arr[i];
    			newIndex++;
    		}
    	}

    	delete[] arr;
    	arr = newArrTemp;
    	newArrTemp = nullptr;

    	cout << "New array: ";
    	ShowArray(arr, newSize);

    }


–ò –Ω–∞–∫–æ–Ω–µ—Ü, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥ —ç—Ç–æ –≤—Å–µ –¥–µ–ª–æ —Ñ-—Ü–∏–∏.