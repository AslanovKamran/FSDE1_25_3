üß† –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏. –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –ø–∞–π—Ç–æ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤ C++ —É—Å—Ç—Ä–æ–µ–Ω—ã —á—É—Ç—å –∏–Ω–∞—á–µ. –ò –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –¥–∞–∂–µ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–µ—Ç –∏ –∫–∞–∫ —ç—Ç–æ –≤—Å–µ —É—Å—Ç—Ä–æ–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏. 

–°++ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫:

–°—Ç—Ä–æ–∫–∏ C-style (¬´—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ¬ª —Å—Ç—Ä–æ–∫–∏ —è–∑—ã–∫–∞ –°–∏), –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–µ —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤—ã —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ—Ç —Ç–∏–ø —Å—Ç—Ä–æ–∫ –±—ã–ª —É–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω —è–∑—ã–∫–æ–º –°++ –æ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–∞—Ä–æ–¥–∏—Ç–µ–ª—è —è–∑—ã–∫–∞ –°–∏, –∫–∞–∫ –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã.

–°—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ std::string. –ö–ª–∞—Å—Å string –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, –æ–¥–Ω–∞–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ string —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –°-—Å—Ç—Ä–æ–∫.

üë©‚Äçüíª –ù–∞—á–Ω–µ–º –º—ã —Å–≤–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ "—Å–ª–æ–∂–Ω–æ–≥–æ" - C-Style —Å—Ç—Ä–æ–∫. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å—ã—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ, –Ω–µ –æ–±–µ—Ä–Ω—É—Ç—ã–µ –Ω–∏ –≤ –∫–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã. –ù–µ –∑–Ω–∞—è —ç—Ç–æ–≥–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ—Å—Ç–æ –±–µ–∑–¥—É–º–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å, —É–ø—Ä–æ—â–∞—é—â–∏–π —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤ –∫–ª–∞—Å—Å–∞ string. –¢–æ–≥–¥–∞ —É–∂–µ –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.

–°–ª–µ–¥—É–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Å—Ç—Ä–æ–∫ –≤ C++ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ê —Ç–æ—á–Ω–µ–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É–¥–∞ —è –±—ã –º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É. –ù–æ –µ—Å—Ç—å —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∑—ã–≤–µ–º—ã–π char - —Å–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–º 1 –±–∞–π—Ç. –°–∏–º–≤–æ–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –≤ —Å–µ–±–µ —Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–æ–π —Å–∏–≤–æ–ª, –Ω–æ —Ç–æ–ª—å–∫–æ 1. –ò –¥–µ–ª–∞–µ—Ç—Å—è —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–≤—ã—á–µ–∫. –ù–∞–ø—Ä–∏–º–µ—Ä:

    char symbol = 'A';

–û–¥–Ω–∞–∫–æ –º—ã —Å –≤–∞–º–∏ –ø–æ–º–Ω–∏–º, —á—Ç–æ –∫–æ–º–ø—å—Ç–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü. –¢.–µ. –æ–Ω –ø–æ–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–≤–æ–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—á–∏—Å–ª–µ–Ω–∏—è. –¢–æ–≥–¥–∞ –∫–∞–∫ –æ–Ω –ø–æ–Ω–∏–º–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã. –û—Ç–≤–µ—Ç –Ω–∏–∫–∞–∫. –í—Å–µ —Å–∏–º–≤–æ–ª—ã –∏–º–µ—é—Ç —Å–≤–æ—é —Å–æ–±—Å–≤—Ç–µ–Ω–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É. –ö–∞–∂–¥–æ–º—É –≤–æ–∑–º–æ–∂–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ —Å—Ç–∞–≤–∏—Ç—Å—è –µ–≥–æ –∫–æ–¥. –î–∞–Ω–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö ASCII –∏–ª–∏ UNICODE, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏. –¢–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–µ –ê –≤ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 65. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ –º–æ–∂–Ω–æ —Ç–∞–∫:
    
    char symbol = 'A';
    cout << "Symbol = " << symbol << " Code = " << (int)symbol;

–ó–Ω–∞—è –∫–æ–¥ —Å–∏–≤–æ–ª–∞ —è –¥–∞–∂–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö char. 

    char symbol = 97;
    cout << "Symbol = " << symbol << " Code = " << (int)symbol;


üí° –¢–µ–ø–µ—Ä—å –∑–Ω–∞—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–º–≤–æ–ª—ã –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –Ω–∞–ø–µ—á–∞—Ç–∞–≤ –ø–æ–¥—Ä—è–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —è –ø–æ–ª—É—á—É —Å–ª–æ–≤–æ, –∞ –∑–∞—Ç–µ–º —Ü–µ–ª—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≥–ª–∞–≤—ã –∏ —Ç.–ø. –≠—Ç–æ –º–æ–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –º–∞—Å—Å–∏–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫. –¢–æ—á–Ω–æ —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–æ–º –Ω–∞ –ø–∏—Å—å–º–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.

–¢–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–ª–æ–≤–æ Hello —è –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫ –Ω–∞ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –¢.–µ. –Ω–∞—à –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∏—á–µ–º –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∂–µ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ –Ω–∞–º –º–∞—Å—Å–∏–≤–∞ –∏–∑ int. –ü–æ—á—Ç–∏. –õ—é–±–∞—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º (–∑–∞–≤–µ—Ä—à–∞—é—â–∏–º) —Å–∏–º–≤–æ–ª–æ–º - –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–æ–º ('\0'). –ù—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–∑–Ω–∞–∫–æ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏. –¢–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ —á–∏—Å–µ–ª, –º—ã –≤ –ª—é–±—É—é —Ñ-—Ü–∏—é —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞, —á—Ç–æ–±—ã –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –µ–≥–æ –ø—Ä–µ–¥–µ–ª—ã. –ö–∞–∫ —Ä–∞–∑ —Ç–∞–∫–∏ –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç—É—Ç. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å—Ç—Ä–æ–∫–∞ "hello" –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º "hello\0".

üß† –ò–∑ —á–µ–≥–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥, —á—Ç–æ –ª—é–±–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤ –±—É–¥—É—é—â–µ–º –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å +1 –±–∞–π—Ç –¥–ª—è –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å —ç—Ç–æ –≤ –≥–æ–ª–æ–≤–µ —Ç–∞–∫ –∫–∞–∫ –≤ C++ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ-—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤—è–∑–∞–Ω—ã –Ω–∞ –ª–æ–≥–∏–∫—É –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞. –ù–∞–ø—Ä–º–µ—Ä —Ñ-—Ü–∏—è strlen - –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–≤–Ω–æ –¥–æ –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞ –∏ –≤ –º–æ–º–µ–Ω—Ç –∫–æ–¥–∞ –æ–Ω –Ω–∞ –Ω–µ–µ –Ω–∞—Ç—ã–∫–∞–µ—Ç—Å—è, —Ç–æ —Ä–∞–±–æ—Ç–∞ —Ñ-—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∏ –æ–Ω–∞ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏.


üë©‚Äçüéì –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–æ–≤—ã—á–∫–∏. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–µ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–≤–æ–π–Ω—ã–π. –û–¥–Ω–∞–∫–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö char —è –Ω–µ –º–æ–≥—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ª–∏—à—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª—å–Ω—ã–π –±–∞–π—Ç.

    char word = "Hi";  ‚ùå

–ò –ø—Ä—è–º–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–∞–º –≤ –∫–æ–Ω–µ—Ü –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç \0. –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ —Å–ª–æ–≤–æ Hi –≤–∏–¥–Ω–æ, —á—Ç–æ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥ –Ω–µ–≥–æ –≤—ã–¥–µ–ª–∏—Ç—å 3 —Å–∏–º–≤–æ–ª–∞, —Ö–æ—Ç—è –±—É–∫–≤ –≤—Å–µ–≥–æ 2. –¢–∞–∫ –≤–æ—Ç 3–∏–π —Å–∏–º–≤–æ–ª —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä. –í–æ—Ç –∫–∞–∫ –Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∂–∏–≤—É—é:

    char word[] = "Hi";

    cout << "String:" << endl;
    for (int i = 0; i < 3; i++) {
        cout << "Position " << i << ": '" << word[i]  << "' (Code: " << (int)word[i] << ")" << endl;
    }



–ö–∞–∫ –∂–µ —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–µ –∏–º–µ—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –Ω–µ–µ. –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫.

    char word [] = "Hi"; ‚úÖ



üß© –ù–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏. 

1. –°–∞–º—ã–º –ø—Ä–æ—Å—Ç—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—à–µ—É–∞–∑–∞–Ω–Ω—ã–π, –≥–¥–µ –º—ã –ø—Ä–æ—Å—Ç–æ –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–æ–≤—ã—á–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∂–µ–ª–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É –≤ –ø–∞—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∏–ø–∞ char []. –£–∫–∞–∑–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å. 

    char str [] = "Hello"

–û–¥–Ω–∞–∫–æ, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, —è –º–æ–≥—É –µ–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–∏–º–≤–æ–ª—å–Ω–æ:

    char str [] = {'H', 'e', 'l', 'l', 'o'};

–û–¥–Ω–∞–∫–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω —è –ø–æ–ª—É—á—É –Ω–µ—á—Ç–æ –±–æ–ª—å—à–µ–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–æ Hello. –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å –ø—Ä–æ null terminator. –ï—Å–ª–∏ —è –Ω–µ –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü, —Ç–æ –º–æ—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –ø–µ—á–∞—Ç–∞—Ç—å—Å—è –ø–æ–∫–∞ –Ω–µ –Ω–∞—Ç–∫–Ω–µ—Ç—Å—è –Ω–∞ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä. –ú–æ–∂–Ω–æ –¥–∞–∂–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ —á–µ—Ä–µ–∑ —Ñ-—Ü–∏—é strlen, –∫–æ—Ç–æ—Ä–æ–∞—è –Ω–∞–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–ª–æ–≤–µ.

–°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º —è–≤—è–ª–µ—Ç—Å—è —ç—Ç–æ—Ç

    char str [] = {'H', 'e', 'l', 'l', 'o', '\0'};

2. –î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å—â–æ–≤–∞—Ç—å sizeof, –æ–¥–Ω–∞–∫–æ –¥–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –±–∞–π—Ç, –∑–∞–Ω—è—Ç—ã—Ö –ø–µ—Ä–µ–º–Ω–Ω–æ–π. –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤, –∫–∞–∂–¥—ã–π –∏—Ö –∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Å–∏—Ç 1 –±–∞–π—Ç, —Ç–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ hi –º—ã —É–≤–∏–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:

    char word[] = "Hi";
	cout << "Sizeof: " << sizeof(word) << endl;  //3 


3. –†–∞–±–æ—Ç–∞ cout —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏: –•–æ—Ç—å –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∏–º—è —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–º —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ int [] cout –≤–µ–¥–µ—Ç —Å–µ–±—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É:

    int numbers[] = {1, 2, 3, 4, 5};
    char letters[] = "Hello";

    cout << numbers << endl; // –í—ã–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å: 0x7fff5fbff760
    cout << letters << endl; // –í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: Hello

–ü–æ—á–µ–º—É —Ç–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?
–û—Ç–≤–µ—Ç: –£ cout –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å char* - cout —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –ù–ï –ø–æ—Ç–æ–º—É, —á—Ç–æ char[] –æ—Å–æ–±–µ–Ω–Ω—ã–π, –∞ –ø–æ—Ç–æ–º—É, —á—Ç–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è char*, –∫–æ—Ç–æ—Ä–∞—è:

–ß–∏—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å '\0'
–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∞ –Ω–µ –∞–¥—Ä–µ—Å

–° –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π —Ç–∞–∫–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É cout –≤—ã–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å. –¢–µ–º –Ω–µ –º–µ–Ω–µ–µ –µ—Å–ª–∏ —Ä–∞–∑–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –Ω–æ —è –ø–æ–ª—É—á—É –ø–µ—Ä–≤—ã–π –µ–µ —Å–∏–º–≤–æ–ª, —Ç–∞–∫ –∫–∞–∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ - —ç—Ç–æ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏

    char letters[] = "Hello";
    cout << letters << endl; // –í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: Hello
    cout << *letters << endl; // –í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: H


‚öôÔ∏è –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (string.h –∏–ª–∏ cstring), –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π, —Ä–µ–∞–ª–∏–∑—É—é—â–∏—Ö —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥—É—é, –ø–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–µ, —Ä–µ–≤–µ—Ä—Å —Å—Ç—Ä–æ–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ë–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ <cstring> —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ —Å—Ç–∏–ª–µ –°–∏ ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤, –æ–∫–∞–Ω—á–∏–≤–∞—é—â–∏–π—Å—è –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–æ–º ('\0'). –¢–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —á–∞—Å—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–º char*.

–ü–æ–¥–∫–ª—é—á–∏–º –¥–∞–Ω–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
    
    #include <cstring>


==================Length of the string==============================

üë©‚Äçüíª –ß–∞—Å—Ç–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –Ω–∞–º –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏. –ò –¥–ª—è —ç—Ç–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≥–æ—Ç–æ–≤–∞—è —Ñ-—Ü–∏—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º strlen.
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–±–µ–∑ —É—á–µ—Ç–∞ '\0').
–¢–∞–∫ –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–ª—É—á—É 2 –∏ 3.

    char word[] = "Hi";
    cout << "strlen: " << strlen(word) << endl;   // 2
    cout << "sizeof: " << sizeof(word) << endl;  // 3

‚ö†Ô∏è –í–∞–∂–Ω–æ: strlen() —Å—á–∏—Ç–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–æ –ø–µ—Ä–≤–æ–≥–æ '\0'. –ú–æ–∂–Ω–æ –¥–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –Ω–∞ –≥–ª—É–ø–æ–º –ø—Ä–∏–º–µ—Ä–µ:
    
    char badString[] = { 'H', 'i', '\0', '!', '!' };
    cout << strlen(badString); // –í—ã–≤–µ–¥–µ—Ç: 2 (–∞ –Ω–µ 5!)

–ò –µ—Å–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞ –≤ –≤–∞—à–µ–π —Å—Ç—Ä–æ–∫–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–Ω–∏—è

    char arr[] = { 'H','e','l','l','o' }; // no null terminator
    cout << strlen(arr) << endl; 
    cout<<sizeof(arr); 

‚ö†Ô∏è –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–π —Ñ-—Ü–∏–∏ size_t, —á—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –±–µ–∑–Ω–∞–∫–æ–≤–æ–º—É —á–∏—Å–ª—É —Ç–∏–ø–∞ unsigned int –¥–ª—è 32–±–∏—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ unsigned long long –¥–ª—è 64—Ö –±–∏—Ç–Ω—ã—Ö. –ü–æ —ç—Ç–æ–º—É –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Ç—Ä—é–∫–∏ 

    char arr[] = "";
    auto length = strlen(arr);
	cout << "Length of array is: " << length << endl;

    cout << "Length - 1\n\n";
	length -= 1;
	cout << "Length of array is: " << length << endl;

‚ö†Ô∏è –í—ã–∑–æ–≤ —Ñ-—Ü–∏–∏ strlen –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –≤–ø–ª–æ—Ç—å –¥–æ –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞. –ò –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Ñ-—Ü–∏–∏ –¥–µ–ª–∞–µ—Ç N –æ–ø–µ—Ä–∞—Ü–∏–π, –≥–¥–µ N ‚Äî –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏. –ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ—Å–µ—Å—Ç—å –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ç–∞–∫:

    for (int i = 0; i < strlen(s); i++) 
    { 

    } 

–í–æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    size_t len = strlen(s);
    for (size_t i = 0; i < len; i++) 
    {

    }


üéØ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–∞–º–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ-—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –Ω–µ–π. 

üß©–†–µ—à–µ–Ω–∏–µ

    
    size_t GetLength(char* string) 
    {
        size_t length = 0;
        size_t index = 0;
        while (string[index] != '\0')
        {
            length++;
            index++;
        }
        return length;
    }

    int main() 
    {
        char string[] = "Hello";
        cout<< GetLength(string);
    }



==================Concatenate strings==============================

üë©‚Äçüíª –ü—Ä–æ—Ü–µ—Å—Å —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è \ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–µ–π. –ù–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å 2 —Å—Ç—Ä–æ–∫–∏ 

    char first[] = "Hello";
    char second[] = " World";

–¢–æ –ø—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —è –ø–æ–ª—É—á—É Hell world –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ cstring —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≥–æ—Ç–æ–≤–∞—è —Ñ-—Ü–∏—è –ø–æ–¥ –∏–º–µ–Ω–µ–º strcat –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º

    strcat(char* destination, const char* source);


–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É source –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ destination. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã —ç—Ç–æ–π —Ñ-—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ destination –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∞. 

‚ùå –û–¥–Ω–∞–∫–æ –≤ Visual Studio –æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —Ç–∞–∫ –∫–∞–∫, –ø–∞–º—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥ destination –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–∏—Ç—å –≤ —Å–µ–±—è —Ä–∞–∑–º–µ—Ä destination + source. –¢.–µ. —Ç–∞–∫–æ–π –∫–æ–¥ —É –Ω–∞—Å –¥–∞–∂–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è:

    char str_1 [10] = "Hi"; // –î–∞–∂–µ –µ—Å–ª–∏ —è –≤—ã–¥–µ–ª—é –±–æ–ª—å—à–∏–π –∫—É—Å–æ–∫ –ø–∞–º—è—Ç–∏.
    char str_2 [] = "Ho";

    strcat(str_1, str_2);

    cout<< str_1 << endl;
    return 0;   

–î–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å –ø–æ–º–æ—â–±—å—é –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∏ #define _CRT_SECURE_NO_WARNINGS –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ-—Ü–∏—é –ù–û —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –≤—ã–¥–µ–ª–∞—Ç—å –¥–ª—è destination-a –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞, –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∞ –≤ –≥–æ–ª–æ–≤–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏

    char str_1 [5] = "Hi"; // –ü—Ä–∏ –º–µ–Ω—å—à–µ–º —Ä–∞–∑–º–µ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∫—Ä–∞—à–Ω–µ—Ç—Å—è.
    char str_2 [] = "Ho";

    strcat(str_1, str_2);

    cout<< str_1 << endl;
    return 0;

üôÖ –î–∞–Ω–Ω—É—é —Ñ-—Ü–∏—é –∫—Ä–∞–π–Ω–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –≤–º–µ—Å—Ç–æ –Ω–µ–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å strcat_s –≥–¥–µ s - –æ–∑–Ω–∞—á–∞–µ—Ç safe.

errno_t strcat_s(char* destination, rsize_t bufferSize, const char* source);

–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É source –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ destination, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ '\0'.
–í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ strcat, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –ø–∞–º—è—Ç–∏ –≤ destination.

    ‚Ä¢ –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–º–µ—â–∞–µ—Ç—Å—è ‚Üí –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è.
    ‚Ä¢ –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è ‚Üí destination –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–æ—Ç–æ–º —Å–º–æ–∂–µ–º –æ—Ç–ª–æ–≤–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é try catch.

–í–æ—Ç –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ –∫–æ–∂–¥–µ: 

    char first[10] = "Hi";   
    char second[] = "Hey";  
    strcat_s(first, sizeof(first), second); 

    cout << "String concatenation successful: " << first << endl;

üí° –î–ª—è –û–° Microsoft –≤ Visual Studio —Å—É—â–µ—Å—Ç–≤—É–µ—Ç extension, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ç—É–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º C++, –ø–æ —ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.

üìö –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è C-—Å—Ç—Ä–æ–∫ –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏

–ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:

char first[];
char second[];

–∏ –º—ã —Ö–æ—Ç–∏–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é strcat_s, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä first –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: strlen(first) + strlen(second) + 1 (+1 ‚Äî –¥–ª—è –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞ '\0')

–ò–Ω–æ–≥–¥–∞ –≤—ã–¥–µ–ª—è—é—Ç –±–æ–ª—å—à–µ, —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∏ –Ω–∞ —ç—Ç–æ –µ—Å—Ç—å —Ä—è–¥ –ø—Ä–∏—á–∏–Ω:

–ó–∞–ø–∞—Å –Ω–∞ –±—É–¥—É—â–µ–µ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏, –Ω–µ –º–µ–Ω—è—è –∫–æ–¥.
–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å ‚Äî –º–µ–Ω—å—à–µ —à–∞–Ω—Å –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
–£–¥–æ–±—Å—Ç–≤–æ ‚Äî –ª–µ–≥—á–µ —á–∏—Ç–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–¥.






===================String copying===================

üë©‚Äçüíª –ü–µ—Ä–µ–π–¥–µ–º –∫ –ø—Ä–æ—Ü–µ—Å—Å—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ –¥—Ä—É–≥—É—é.  –¢–∞–∫–∂–µ –∫–∞–∫ –∏ –≤ —Å–ª—É—á–∞–µ —Å strcat —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ-—Ü–∏—è strcpy, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ Visual Studio –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–∞–Ω–Ω–æ–π —Ñ-—Ü–∏–∏ strcpy_s.

strcpy_s( char* destination, rsize_t bufferSize, const char* source);

    destination ‚Äî –∫—É–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É.
    source ‚Äî –æ—Ç–∫—É–¥–∞ –∫–æ—Ç–æ—Ä—É—é –∫–æ–ø–∏—Ä—É–µ–º.
    bufferSize ‚Äî –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ destination (–≤ –±–∞–π—Ç–∞—Ö).


–§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ source –≤ —Å—Ç—Ä–æ–∫—É destination, –≤–∫–ª—é—á–∞—è –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä '\0'.

    char source[] = "Hello";
    char destination[10];

    cout << "Before strcpy_s, destination: " << destination << endl;
    cout << "Before strcpy_s, source: " << source << endl;

    strcpy_s(destination, sizeof(destination), source);

    cout << "\n\nAfter strcpy_s, destination: " << destination << endl;
    cout << "After strcpy_s, source: " << source << endl;
    return 0;

–ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä destination-–∞ –±—É–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª, —Ç–æ —è –ø–æ–ª—É—á—É –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

üí° –î–ª—è –û–° Microsoft –≤ Visual Studio —Å—É—â–µ—Å—Ç–≤—É–µ—Ç extension, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞, –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ç—É–¥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û–¥–Ω–∞–∫–æ —ç—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º C++, –ø–æ —ç—Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.




=================== String —Åomaprision ===================


üìö –§—É–Ω–∫—Ü–∏—è strcmp –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ <cstring>

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–µ –Ω—É–ª—å-—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ C-—Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫.
–õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–± —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫  –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä—è–¥–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ. –¢–∞–∫ –∫–∞–∫ –ª—é–±–æ–º—É —Å–∏–º–≤–æ–ª—É –º–æ–∂–Ω–æ —Å–æ–æ—Ç–Ω–µ—Å—Ç–∏ —á–∏—Å–ª–æ –∏–∑ –∞–ª—Ñ–∞–≤–∏—Ç–∞ ASCII, –ø–æ —Ñ–∞–∫—Ç—É —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —á–∏—Å–ª–∞. –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ-—Ü–∏–∏ —Ç–∞–∫–æ–≤

    int strcmp(const char* str1, const char* str2);

üë©‚Äçüíª –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Å–∏–º–≤–æ–ª –∑–∞ —Å–∏–º–≤–æ–ª–æ–º:

    ‚Ä¢ –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ —Ä–∞–≤–Ω—ã ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.
    ‚Ä¢ –ï—Å–ª–∏ str1 < str2 ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ -1.
    ‚Ä¢ –ï—Å–ª–∏ str1 > str2 ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ 1.

–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–∫:

    char str1[] = "Hello";
    char str2[] = "World";
    char str3[] = "Hello";

    cout << "str1 vs str2: " << strcmp(str1, str2) << endl; // –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
    cout << "str2 vs str1: " << strcmp(str2, str1) << endl; // –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    cout << "str1 vs str3: " << strcmp(str1, str3) << endl; // 0

‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

–î–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è —É—á–∏—Ç–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º A –Ω–µ —Ä–∞–≤–Ω–æ a.  –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç _stricmp

    char str1[] = "HELLO";
    char str2[] = "hello";

    cout << "str1 vs str2: " << strcmp(str1, str2) << endl;    
    cout << "str1 vs str2: " << _stricmp(str1, str2) << endl;  




=================== Character search ===================

üìö –§—É–Ω–∫—Ü–∏—è strchr –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ <cstring>

    char* strchr(const char* data, int c);

    ‚Ä¢ data ‚Äî —Å—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—â–µ–º —Å–∏–º–≤–æ–ª.
    ‚Ä¢ c ‚Äî —Å–∏–º–≤–æ–ª (–≤ –≤–∏–¥–µ char –∏–ª–∏ int), –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ–º.
    ‚Ä¢ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ, –∏–ª–∏ nullptr, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.

üë©‚Äçüíª –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ ch –≤ —Å—Ç—Ä–æ–∫—É str. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è nullptr.

–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:

    char str[] = "Hello World";
    char* ptr = strchr(str, 'o');

    cout << "String: " << str << endl;
    cout << "ptr : " << ptr << endl;

    cout << "Address of str: " << (void*)str << endl;
    cout << "Address of ptr: " << (void*)ptr << endl;

–î–∞–Ω–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞–π–¥–µ–Ω –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª o. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –µ–≥–æ –ø–µ—á–∞—Ç—å –Ω–∞—á–Ω–µ—Ç—Å—è —Å o World.

–û–±—ã—á–Ω–æ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–º –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–∂–¥–µ–Ω–∏—è, –∞ –¥–∞–Ω–Ω–∞—è —Ñ-—Ü–∏—è - —É–∫–∞–∑–∞—Ç–µ–ª—å. –ù–æ –∏ –∏–∑ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –µ—Å—Ç—å –≤—ã—Ö–æ–¥. –¢–∞–∫ –∫–∞–∫ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –≤–µ—Å–∏—Ç 1 –±–∞–π—Ç, —Ç–æ –∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É ptr –∏ str –∫–∞–∫ —Ä–∞–∑ —Ç–∞–∫–∏ –Ω–∞–º –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≤–Ω–æ –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∏—Å–∫–æ–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞. 

    char str[] = "Hello World";
    char target = 'o';
    char* ptr = strchr(str, target);

    cout << "String: " << str << endl;
    cout << "Looking for '" << target << "' in the string." << endl;

    if (ptr != nullptr)
    {
    	cout << "\n\nCharacter found:"<< endl;
    	int index = ptr - str;
    	cout << "Index of 'o': " << index << endl;
    }
    else
    	cout << "Charecter not found" << endl;

    return 0;

üí° –î–ª—è –ø–æ–∏—Å–∫–∞ –∂–µ —Ü–µ–ª–æ–π –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ-—Ü–∏—è strstr. –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ñ-—Ü–∏–∏.

    char str[] = "Hello World";
    char target [] = "World";

    char* ptr = strstr(str, target);

    cout << "String: " << str << endl;
    cout << "Looking for '" << target << "' in the string." << endl;

    if (ptr != nullptr)
    {
        cout << "\n\String found:"<< endl;
        int index = ptr - str;
        cout << "Index of target: " << index << endl;
    }
    else
        cout << "String not found" << endl;

    return 0;


üß† –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ —Ä–∞–±–æ—Ç–µ —Å—Ç—Ä–æ–∫ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏. –ö–æ–≥–¥–∞ –º—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –º–∞—Å—Å–∏–≤–∞–º–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞. –°–æ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–∞–∫ –¥–µ–ª–∞—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ª—é–±–∞—è C —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω—É–ª—å —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–æ–º. –ò –Ω–∞—à —Ü–∏–∫–ª –º–æ–∂–Ω–æ –æ–±–æ—Ä–≤–∞—Ç—å –≤ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–º —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.

    
    void TestString(char* str) 
    {
    	cout << "String: " << str << endl;

    	cout << "Cycling:\n\n" << endl;
    	for (int i = 0; str[i] != '\0'; i++)
    	{
    		cout << "Character: " << str[i] << " Position: " << i<<endl;
    	}
    }

–ò–ª–∏ —Ç–∞–∫

    void TestString(char* str) 
    {
    	cout << "String: " << str << endl;
        int length = strlen(str);

    	cout << "Cycling:\n\n" << endl;
    	for (int i = 0; i<length; i++)
    	{
    		cout << "Character: " << str[i] << " Position: " << i<<endl;
    	}
    }

‚ö†Ô∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ ¬´–ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏¬ª
–ö–∞–∫ —É–∂–µ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω–µ–µ, –Ω–µ –≤—ã—á–∏—Å–ª—è–π—Ç–µ strlen(str) –≤ for. –¢–∞–∫ –∫–∞–∫ –Ω–∞ –∫–∞–∂–¥—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é —Ü–∏–∫–ª–∞ —Ñ-—Ü–∏—è –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è.

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π, —á–∞—Å—Ç–æ –ø–∏—à—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç. –°—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø–æ —É–∫–∞–∑–∞—Ç–µ–ª—é, –ø–æ—ç—Ç–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –î–ª—è –¥–æ–ø –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å const.

üéØ –ü—Ä–∞–∫—Ç–∏–∫–∞\ –î–ó
–ó–∞–¥–∞–Ω–∏–µ 1
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤. –ó–∞–º–µ–Ω–∏—Ç—å –≤ –Ω–µ–π –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ -.

–ó–∞–¥–∞–Ω–∏–µ 2
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å—Ç—Ä–æ–∫–µ.

–ó–∞–¥–∞–Ω–∏–µ 3
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.

–ó–∞–¥–∞–Ω–∏–µ 4
–ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).

–ó–∞–¥–∞–Ω–∏–µ 5
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–∏–º–≤–æ–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.

–ó–∞–¥–∞–Ω–∏–µ 6
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.

—Å—Ç—Ä–æ–∫–∞: "banana"
—Å–∏–º–≤–æ–ª: 'a'
—Ä–µ–∑—É–ª—å—Ç–∞—Ç: "bnn"








üß©–†–µ—à–µ–Ω–∏–µ

–ó–∞–¥–∞—á–∞ 1. –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ -


void ReplaceSpacesWithHyphens(char* const str) {
	
	int len = strlen(str);

	for (int i = 0; i < len; i++) {
		if (str[i] == ' ') {
			str[i] = '-';
		}
	}
}


–ó–∞–¥–∞—á–∞ 2. –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

0‚Äì9 ‚Üí 48‚Äì57
A‚ÄìZ ‚Üí 65‚Äì90
a‚Äìz ‚Üí 97‚Äì122

    void count_chars(const char* const str, int& letters, int& digits, int& others) {
        letters = digits = others = 0;
        for (size_t i = 0; str[i] != '\0'; i++) {
            char c = str[i];
            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
                letters++;
            } 
            else if (c >= '0' && c <= '9') {
                digits++;
            } 
            else {
                others++;
            }
        }
    }

    int main() 
    {
        char text[] = "Hello 123!";
        int letters, digits, others;
        count_chars(text, letters, digits, others);
        cout << "Letters: " << letters
            << ", Digits: " << digits
            << ", Others: " << others << endl;
    }

–ó–∞–¥–∞—á–∞ 3. –ü–∞–ª–∏–Ω–¥—Ä–æ–º

    bool is_palindrome(const char* str) {

    size_t len = strlen(str);
    if (len == 0) return true; // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–∞–ª–∏–Ω–¥—Ä–æ–º

    size_t left = 0;
    size_t right = len - 1;

    while (left < right) {
        if (str[left] != str[right]) {
            return false;
        }
        left++;
        right--;
    }
    return true;
    }

–ó–∞–¥–∞–Ω–∏–µ 4 –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ).

    void count_vowels_consonants(const char* str, int& vowels, int& consonants) {
        vowels = consonants = 0;

        for (size_t i = 0; str[i] != '\0'; i++) {
            char c = str[i];

            // –ø—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ –ª–∞—Ç–∏–Ω—Å–∫–∞—è –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ?
            if (c >= 'a' && c <= 'z') {
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                    vowels++;
                } else {
                    consonants++;
                }
            }
        }
    }

    int main() {
    char text[] = "hello world 123!";
    int vowels, consonants;

    count_vowels_consonants(text, vowels, consonants);

    cout << "Vowels: " << vowels << endl;
    cout << "Consonants: " << consonants << endl;
    }


–ó–∞–¥–∞–Ω–∏–µ 5
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–∏–º–≤–æ–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.

    bool remove_char_dynamic(char*& str, size_t index) {
        size_t len = strlen(str);
        if (index >= len) return false;

        char* new_str = new char[len]; // len-1 —Å–∏–º–≤–æ–ª + '\0'

        size_t j = 0;
        for (size_t i = 0; i < len; i++) {
            if (i != index) {
                new_str[j++] = str[i];
            }
        }
        new_str[j] = '\0';

        delete[] str; // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–º—è—Ç—å
        str = new_str; // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å

        return true;
    }


–ó–∞–¥–∞–Ω–∏–µ 6
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.

    void remove_all_occurrences(char*& str, char ch) {
        size_t len = strlen(str);
        size_t count = 0;
    
        // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ch
        for (size_t i = 0; i < len; i++) {
            if (str[i] == ch) count++;
        }
    
        // –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä = len - count + 1 ('\0')
        char* new_str = new char[len - count + 1];
        size_t j = 0;
    
        for (size_t i = 0; i < len; i++) {
            if (str[i] != ch) {
                new_str[j++] = str[i];
            }
        }
        new_str[j] = '\0';
    
        delete[] str;  // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–º—è—Ç—å
        str = new_str; // –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
    }
    
    int main() {
        char* text = new char[7];
        strcpy(text, "banana");
    
        cout << "Before: " << text << endl;
    
        remove_all_occurrences(text, 'a');
    
        cout << "After:  " << text << endl;
    
        delete[] text; // –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
    }